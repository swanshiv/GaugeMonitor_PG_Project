'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("VersaGageMonitorDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class VersaGageMonitorDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCommunicationPort As CommunicationPortDataTable
    
    Private tableCustmerInterfaceBox As CustmerInterfaceBoxDataTable
    
    Private tableCustomerOctaGage As CustomerOctaGageDataTable
    
    Private tableCustomerTriColorColumn As CustomerTriColorColumnDataTable
    
    Private tableLogin As LoginDataTable
    
    Private tablepartdetails As partdetailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CommunicationPort")) Is Nothing) Then
                MyBase.Tables.Add(New CommunicationPortDataTable(ds.Tables("CommunicationPort")))
            End If
            If (Not (ds.Tables("CustmerInterfaceBox")) Is Nothing) Then
                MyBase.Tables.Add(New CustmerInterfaceBoxDataTable(ds.Tables("CustmerInterfaceBox")))
            End If
            If (Not (ds.Tables("CustomerOctaGage")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerOctaGageDataTable(ds.Tables("CustomerOctaGage")))
            End If
            If (Not (ds.Tables("CustomerTriColorColumn")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerTriColorColumnDataTable(ds.Tables("CustomerTriColorColumn")))
            End If
            If (Not (ds.Tables("Login")) Is Nothing) Then
                MyBase.Tables.Add(New LoginDataTable(ds.Tables("Login")))
            End If
            If (Not (ds.Tables("partdetails")) Is Nothing) Then
                MyBase.Tables.Add(New partdetailsDataTable(ds.Tables("partdetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CommunicationPort() As CommunicationPortDataTable
        Get
            Return Me.tableCommunicationPort
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustmerInterfaceBox() As CustmerInterfaceBoxDataTable
        Get
            Return Me.tableCustmerInterfaceBox
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerOctaGage() As CustomerOctaGageDataTable
        Get
            Return Me.tableCustomerOctaGage
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerTriColorColumn() As CustomerTriColorColumnDataTable
        Get
            Return Me.tableCustomerTriColorColumn
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Login() As LoginDataTable
        Get
            Return Me.tableLogin
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partdetails() As partdetailsDataTable
        Get
            Return Me.tablepartdetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As VersaGageMonitorDataSet = CType(MyBase.Clone,VersaGageMonitorDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CommunicationPort")) Is Nothing) Then
                MyBase.Tables.Add(New CommunicationPortDataTable(ds.Tables("CommunicationPort")))
            End If
            If (Not (ds.Tables("CustmerInterfaceBox")) Is Nothing) Then
                MyBase.Tables.Add(New CustmerInterfaceBoxDataTable(ds.Tables("CustmerInterfaceBox")))
            End If
            If (Not (ds.Tables("CustomerOctaGage")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerOctaGageDataTable(ds.Tables("CustomerOctaGage")))
            End If
            If (Not (ds.Tables("CustomerTriColorColumn")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerTriColorColumnDataTable(ds.Tables("CustomerTriColorColumn")))
            End If
            If (Not (ds.Tables("Login")) Is Nothing) Then
                MyBase.Tables.Add(New LoginDataTable(ds.Tables("Login")))
            End If
            If (Not (ds.Tables("partdetails")) Is Nothing) Then
                MyBase.Tables.Add(New partdetailsDataTable(ds.Tables("partdetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCommunicationPort = CType(MyBase.Tables("CommunicationPort"),CommunicationPortDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCommunicationPort) Is Nothing) Then
                Me.tableCommunicationPort.InitVars
            End If
        End If
        Me.tableCustmerInterfaceBox = CType(MyBase.Tables("CustmerInterfaceBox"),CustmerInterfaceBoxDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustmerInterfaceBox) Is Nothing) Then
                Me.tableCustmerInterfaceBox.InitVars
            End If
        End If
        Me.tableCustomerOctaGage = CType(MyBase.Tables("CustomerOctaGage"),CustomerOctaGageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomerOctaGage) Is Nothing) Then
                Me.tableCustomerOctaGage.InitVars
            End If
        End If
        Me.tableCustomerTriColorColumn = CType(MyBase.Tables("CustomerTriColorColumn"),CustomerTriColorColumnDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomerTriColorColumn) Is Nothing) Then
                Me.tableCustomerTriColorColumn.InitVars
            End If
        End If
        Me.tableLogin = CType(MyBase.Tables("Login"),LoginDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLogin) Is Nothing) Then
                Me.tableLogin.InitVars
            End If
        End If
        Me.tablepartdetails = CType(MyBase.Tables("partdetails"),partdetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepartdetails) Is Nothing) Then
                Me.tablepartdetails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "VersaGageMonitorDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/VersaGageMonitorDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCommunicationPort = New CommunicationPortDataTable
        MyBase.Tables.Add(Me.tableCommunicationPort)
        Me.tableCustmerInterfaceBox = New CustmerInterfaceBoxDataTable
        MyBase.Tables.Add(Me.tableCustmerInterfaceBox)
        Me.tableCustomerOctaGage = New CustomerOctaGageDataTable
        MyBase.Tables.Add(Me.tableCustomerOctaGage)
        Me.tableCustomerTriColorColumn = New CustomerTriColorColumnDataTable
        MyBase.Tables.Add(Me.tableCustomerTriColorColumn)
        Me.tableLogin = New LoginDataTable
        MyBase.Tables.Add(Me.tableLogin)
        Me.tablepartdetails = New partdetailsDataTable
        MyBase.Tables.Add(Me.tablepartdetails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCommunicationPort() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustmerInterfaceBox() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustomerOctaGage() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustomerTriColorColumn() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLogin() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepartdetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CommunicationPortRowChangeEventHandler(ByVal sender As Object, ByVal e As CommunicationPortRowChangeEvent)
    
    Public Delegate Sub CustmerInterfaceBoxRowChangeEventHandler(ByVal sender As Object, ByVal e As CustmerInterfaceBoxRowChangeEvent)
    
    Public Delegate Sub CustomerOctaGageRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerOctaGageRowChangeEvent)
    
    Public Delegate Sub CustomerTriColorColumnRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerTriColorColumnRowChangeEvent)
    
    Public Delegate Sub LoginRowChangeEventHandler(ByVal sender As Object, ByVal e As LoginRowChangeEvent)
    
    Public Delegate Sub partdetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As partdetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CommunicationPortDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPort As Global.System.Data.DataColumn
        
        Private columnBaud_Rate As Global.System.Data.DataColumn
        
        Private columnData_Bits As Global.System.Data.DataColumn
        
        Private columnParity As Global.System.Data.DataColumn
        
        Private columnStop_Bit As Global.System.Data.DataColumn
        
        Private columnFlow_Control As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CommunicationPort"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Baud_RateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaud_Rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Data_BitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnData_Bits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stop_BitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStop_Bit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Flow_ControlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlow_Control
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CommunicationPortRow
            Get
                Return CType(Me.Rows(index),CommunicationPortRow)
            End Get
        End Property
        
        Public Event CommunicationPortRowChanging As CommunicationPortRowChangeEventHandler
        
        Public Event CommunicationPortRowChanged As CommunicationPortRowChangeEventHandler
        
        Public Event CommunicationPortRowDeleting As CommunicationPortRowChangeEventHandler
        
        Public Event CommunicationPortRowDeleted As CommunicationPortRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCommunicationPortRow(ByVal row As CommunicationPortRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCommunicationPortRow(ByVal Port As String, ByVal Baud_Rate As String, ByVal Data_Bits As String, ByVal Parity As String, ByVal Stop_Bit As String, ByVal Flow_Control As String) As CommunicationPortRow
            Dim rowCommunicationPortRow As CommunicationPortRow = CType(Me.NewRow,CommunicationPortRow)
            Dim columnValuesArray() As Object = New Object() {Port, Baud_Rate, Data_Bits, Parity, Stop_Bit, Flow_Control}
            rowCommunicationPortRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCommunicationPortRow)
            Return rowCommunicationPortRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CommunicationPortDataTable = CType(MyBase.Clone,CommunicationPortDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CommunicationPortDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPort = MyBase.Columns("Port")
            Me.columnBaud_Rate = MyBase.Columns("Baud_Rate")
            Me.columnData_Bits = MyBase.Columns("Data_Bits")
            Me.columnParity = MyBase.Columns("Parity")
            Me.columnStop_Bit = MyBase.Columns("Stop_Bit")
            Me.columnFlow_Control = MyBase.Columns("Flow_Control")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPort = New Global.System.Data.DataColumn("Port", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPort)
            Me.columnBaud_Rate = New Global.System.Data.DataColumn("Baud_Rate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaud_Rate)
            Me.columnData_Bits = New Global.System.Data.DataColumn("Data_Bits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnData_Bits)
            Me.columnParity = New Global.System.Data.DataColumn("Parity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParity)
            Me.columnStop_Bit = New Global.System.Data.DataColumn("Stop_Bit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStop_Bit)
            Me.columnFlow_Control = New Global.System.Data.DataColumn("Flow_Control", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlow_Control)
            Me.columnPort.MaxLength = 50
            Me.columnBaud_Rate.MaxLength = 50
            Me.columnData_Bits.MaxLength = 50
            Me.columnParity.MaxLength = 50
            Me.columnStop_Bit.MaxLength = 50
            Me.columnFlow_Control.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCommunicationPortRow() As CommunicationPortRow
            Return CType(Me.NewRow,CommunicationPortRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CommunicationPortRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CommunicationPortRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CommunicationPortRowChangedEvent) Is Nothing) Then
                RaiseEvent CommunicationPortRowChanged(Me, New CommunicationPortRowChangeEvent(CType(e.Row,CommunicationPortRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CommunicationPortRowChangingEvent) Is Nothing) Then
                RaiseEvent CommunicationPortRowChanging(Me, New CommunicationPortRowChangeEvent(CType(e.Row,CommunicationPortRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CommunicationPortRowDeletedEvent) Is Nothing) Then
                RaiseEvent CommunicationPortRowDeleted(Me, New CommunicationPortRowChangeEvent(CType(e.Row,CommunicationPortRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CommunicationPortRowDeletingEvent) Is Nothing) Then
                RaiseEvent CommunicationPortRowDeleting(Me, New CommunicationPortRowChangeEvent(CType(e.Row,CommunicationPortRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCommunicationPortRow(ByVal row As CommunicationPortRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CommunicationPortDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustmerInterfaceBoxDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnOrganisation As Global.System.Data.DataColumn
        
        Private columnAddressLine1 As Global.System.Data.DataColumn
        
        Private columnAddressLine2 As Global.System.Data.DataColumn
        
        Private columnAddressLine3 As Global.System.Data.DataColumn
        
        Private columnContactPerson As Global.System.Data.DataColumn
        
        Private columnNumberOfChanels As Global.System.Data.DataColumn
        
        Private columnChanelFormat As Global.System.Data.DataColumn
        
        Private columnChanelPrefix As Global.System.Data.DataColumn
        
        Private columnChanelNumber As Global.System.Data.DataColumn
        
        Private columnChanelValue As Global.System.Data.DataColumn
        
        Private columnChanelSuffix As Global.System.Data.DataColumn
        
        Private columnSampleSize As Global.System.Data.DataColumn
        
        Private columnSampleFrequency As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustmerInterfaceBox"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganisationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganisation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberOfChanelsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberOfChanels
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChanelFormatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChanelFormat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChanelPrefixColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChanelPrefix
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChanelNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChanelNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChanelValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChanelValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChanelSuffixColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChanelSuffix
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroupsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustmerInterfaceBoxRow
            Get
                Return CType(Me.Rows(index),CustmerInterfaceBoxRow)
            End Get
        End Property
        
        Public Event CustmerInterfaceBoxRowChanging As CustmerInterfaceBoxRowChangeEventHandler
        
        Public Event CustmerInterfaceBoxRowChanged As CustmerInterfaceBoxRowChangeEventHandler
        
        Public Event CustmerInterfaceBoxRowDeleting As CustmerInterfaceBoxRowChangeEventHandler
        
        Public Event CustmerInterfaceBoxRowDeleted As CustmerInterfaceBoxRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustmerInterfaceBoxRow(ByVal row As CustmerInterfaceBoxRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustmerInterfaceBoxRow(ByVal Organisation As String, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal ContactPerson As String, ByVal NumberOfChanels As Short, ByVal ChanelFormat As String, ByVal ChanelPrefix As String, ByVal ChanelNumber As String, ByVal ChanelValue As String, ByVal ChanelSuffix As String, ByVal SampleSize As Short, ByVal SampleFrequency As Short, ByVal NumberofSubGroups As Short) As CustmerInterfaceBoxRow
            Dim rowCustmerInterfaceBoxRow As CustmerInterfaceBoxRow = CType(Me.NewRow,CustmerInterfaceBoxRow)
            Dim columnValuesArray() As Object = New Object() {Organisation, AddressLine1, AddressLine2, AddressLine3, ContactPerson, NumberOfChanels, ChanelFormat, ChanelPrefix, ChanelNumber, ChanelValue, ChanelSuffix, SampleSize, SampleFrequency, NumberofSubGroups}
            rowCustmerInterfaceBoxRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustmerInterfaceBoxRow)
            Return rowCustmerInterfaceBoxRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustmerInterfaceBoxDataTable = CType(MyBase.Clone,CustmerInterfaceBoxDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustmerInterfaceBoxDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrganisation = MyBase.Columns("Organisation")
            Me.columnAddressLine1 = MyBase.Columns("AddressLine1")
            Me.columnAddressLine2 = MyBase.Columns("AddressLine2")
            Me.columnAddressLine3 = MyBase.Columns("AddressLine3")
            Me.columnContactPerson = MyBase.Columns("ContactPerson")
            Me.columnNumberOfChanels = MyBase.Columns("NumberOfChanels")
            Me.columnChanelFormat = MyBase.Columns("ChanelFormat")
            Me.columnChanelPrefix = MyBase.Columns("ChanelPrefix")
            Me.columnChanelNumber = MyBase.Columns("ChanelNumber")
            Me.columnChanelValue = MyBase.Columns("ChanelValue")
            Me.columnChanelSuffix = MyBase.Columns("ChanelSuffix")
            Me.columnSampleSize = MyBase.Columns("SampleSize")
            Me.columnSampleFrequency = MyBase.Columns("SampleFrequency")
            Me.columnNumberofSubGroups = MyBase.Columns("NumberofSubGroups")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrganisation = New Global.System.Data.DataColumn("Organisation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganisation)
            Me.columnAddressLine1 = New Global.System.Data.DataColumn("AddressLine1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine1)
            Me.columnAddressLine2 = New Global.System.Data.DataColumn("AddressLine2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New Global.System.Data.DataColumn("AddressLine3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine3)
            Me.columnContactPerson = New Global.System.Data.DataColumn("ContactPerson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPerson)
            Me.columnNumberOfChanels = New Global.System.Data.DataColumn("NumberOfChanels", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberOfChanels)
            Me.columnChanelFormat = New Global.System.Data.DataColumn("ChanelFormat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChanelFormat)
            Me.columnChanelPrefix = New Global.System.Data.DataColumn("ChanelPrefix", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChanelPrefix)
            Me.columnChanelNumber = New Global.System.Data.DataColumn("ChanelNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChanelNumber)
            Me.columnChanelValue = New Global.System.Data.DataColumn("ChanelValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChanelValue)
            Me.columnChanelSuffix = New Global.System.Data.DataColumn("ChanelSuffix", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChanelSuffix)
            Me.columnSampleSize = New Global.System.Data.DataColumn("SampleSize", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize)
            Me.columnSampleFrequency = New Global.System.Data.DataColumn("SampleFrequency", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency)
            Me.columnNumberofSubGroups = New Global.System.Data.DataColumn("NumberofSubGroups", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups)
            Me.columnOrganisation.MaxLength = 50
            Me.columnAddressLine1.MaxLength = 50
            Me.columnAddressLine2.MaxLength = 50
            Me.columnAddressLine3.MaxLength = 50
            Me.columnContactPerson.MaxLength = 50
            Me.columnChanelFormat.MaxLength = 50
            Me.columnChanelPrefix.MaxLength = 50
            Me.columnChanelNumber.MaxLength = 50
            Me.columnChanelValue.MaxLength = 50
            Me.columnChanelSuffix.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustmerInterfaceBoxRow() As CustmerInterfaceBoxRow
            Return CType(Me.NewRow,CustmerInterfaceBoxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustmerInterfaceBoxRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustmerInterfaceBoxRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustmerInterfaceBoxRowChangedEvent) Is Nothing) Then
                RaiseEvent CustmerInterfaceBoxRowChanged(Me, New CustmerInterfaceBoxRowChangeEvent(CType(e.Row,CustmerInterfaceBoxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustmerInterfaceBoxRowChangingEvent) Is Nothing) Then
                RaiseEvent CustmerInterfaceBoxRowChanging(Me, New CustmerInterfaceBoxRowChangeEvent(CType(e.Row,CustmerInterfaceBoxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustmerInterfaceBoxRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustmerInterfaceBoxRowDeleted(Me, New CustmerInterfaceBoxRowChangeEvent(CType(e.Row,CustmerInterfaceBoxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustmerInterfaceBoxRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustmerInterfaceBoxRowDeleting(Me, New CustmerInterfaceBoxRowChangeEvent(CType(e.Row,CustmerInterfaceBoxRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustmerInterfaceBoxRow(ByVal row As CustmerInterfaceBoxRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustmerInterfaceBoxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerOctaGageDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPartID As Global.System.Data.DataColumn
        
        Private columnPartName As Global.System.Data.DataColumn
        
        Private columnOrganisation As Global.System.Data.DataColumn
        
        Private columnAddressLine1 As Global.System.Data.DataColumn
        
        Private columnAddressLine2 As Global.System.Data.DataColumn
        
        Private columnAddressLine3 As Global.System.Data.DataColumn
        
        Private columnoperatorname As Global.System.Data.DataColumn
        
        Private columnNumberOfResults As Global.System.Data.DataColumn
        
        Private columnParameterName1 As Global.System.Data.DataColumn
        
        Private columnUSL1 As Global.System.Data.DataColumn
        
        Private columnUCL1 As Global.System.Data.DataColumn
        
        Private columnNOM1 As Global.System.Data.DataColumn
        
        Private columnLCL1 As Global.System.Data.DataColumn
        
        Private columnLSL1 As Global.System.Data.DataColumn
        
        Private columnSampleSize1 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency1 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups1 As Global.System.Data.DataColumn
        
        Private columnParameterName2 As Global.System.Data.DataColumn
        
        Private columnUSL2 As Global.System.Data.DataColumn
        
        Private columnUCL2 As Global.System.Data.DataColumn
        
        Private columnNOM2 As Global.System.Data.DataColumn
        
        Private columnLCL2 As Global.System.Data.DataColumn
        
        Private columnLSL2 As Global.System.Data.DataColumn
        
        Private columnSampleSize2 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency2 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups2 As Global.System.Data.DataColumn
        
        Private columnParameterName3 As Global.System.Data.DataColumn
        
        Private columnUSL3 As Global.System.Data.DataColumn
        
        Private columnUCL3 As Global.System.Data.DataColumn
        
        Private columnNOM3 As Global.System.Data.DataColumn
        
        Private columnLCL3 As Global.System.Data.DataColumn
        
        Private columnLSL3 As Global.System.Data.DataColumn
        
        Private columnSampleSize3 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency3 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups3 As Global.System.Data.DataColumn
        
        Private columnParameterName4 As Global.System.Data.DataColumn
        
        Private columnUSL4 As Global.System.Data.DataColumn
        
        Private columnUCL4 As Global.System.Data.DataColumn
        
        Private columnNOM4 As Global.System.Data.DataColumn
        
        Private columnLCL4 As Global.System.Data.DataColumn
        
        Private columnLSL4 As Global.System.Data.DataColumn
        
        Private columnSampleSize4 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency4 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups4 As Global.System.Data.DataColumn
        
        Private columnParameterName5 As Global.System.Data.DataColumn
        
        Private columnUSL5 As Global.System.Data.DataColumn
        
        Private columnUCL5 As Global.System.Data.DataColumn
        
        Private columnNOM5 As Global.System.Data.DataColumn
        
        Private columnLCL5 As Global.System.Data.DataColumn
        
        Private columnLSL5 As Global.System.Data.DataColumn
        
        Private columnSampleSize5 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency5 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups5 As Global.System.Data.DataColumn
        
        Private columnParameterName6 As Global.System.Data.DataColumn
        
        Private columnUSL6 As Global.System.Data.DataColumn
        
        Private columnUCL6 As Global.System.Data.DataColumn
        
        Private columnNOM6 As Global.System.Data.DataColumn
        
        Private columnLCL6 As Global.System.Data.DataColumn
        
        Private columnLSL6 As Global.System.Data.DataColumn
        
        Private columnSampleSize6 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency6 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups6 As Global.System.Data.DataColumn
        
        Private columnParameterName7 As Global.System.Data.DataColumn
        
        Private columnUSL7 As Global.System.Data.DataColumn
        
        Private columnUCL7 As Global.System.Data.DataColumn
        
        Private columnNOM7 As Global.System.Data.DataColumn
        
        Private columnLCL7 As Global.System.Data.DataColumn
        
        Private columnLSL7 As Global.System.Data.DataColumn
        
        Private columnSampleSize7 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency7 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups7 As Global.System.Data.DataColumn
        
        Private columnParameterName8 As Global.System.Data.DataColumn
        
        Private columnUSL8 As Global.System.Data.DataColumn
        
        Private columnUCL8 As Global.System.Data.DataColumn
        
        Private columnNOM8 As Global.System.Data.DataColumn
        
        Private columnLCL8 As Global.System.Data.DataColumn
        
        Private columnLSL8 As Global.System.Data.DataColumn
        
        Private columnSampleSize8 As Global.System.Data.DataColumn
        
        Private columnSampleFrequency8 As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups8 As Global.System.Data.DataColumn
        
        Private columnuslcolor As Global.System.Data.DataColumn
        
        Private columnuclcolor As Global.System.Data.DataColumn
        
        Private columnnvcolor As Global.System.Data.DataColumn
        
        Private columnlclcolor As Global.System.Data.DataColumn
        
        Private columnlslcolor As Global.System.Data.DataColumn
        
        Private columnmachinenum As Global.System.Data.DataColumn
        
        Private columnnumberofparameters As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomerOctaGage"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganisationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganisation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property operatornameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoperatorname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberOfResultsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberOfResults
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterName8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USL8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCL8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOM8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCL8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSL8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSize8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequency8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroups8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uslcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuslcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uclcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuclcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nvcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnvcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lclcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlclcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lslcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlslcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property machinenumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmachinenum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numberofparametersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnumberofparameters
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerOctaGageRow
            Get
                Return CType(Me.Rows(index),CustomerOctaGageRow)
            End Get
        End Property
        
        Public Event CustomerOctaGageRowChanging As CustomerOctaGageRowChangeEventHandler
        
        Public Event CustomerOctaGageRowChanged As CustomerOctaGageRowChangeEventHandler
        
        Public Event CustomerOctaGageRowDeleting As CustomerOctaGageRowChangeEventHandler
        
        Public Event CustomerOctaGageRowDeleted As CustomerOctaGageRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustomerOctaGageRow(ByVal row As CustomerOctaGageRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustomerOctaGageRow( _
                    ByVal PartName As String,  _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal operatorname As String,  _
                    ByVal NumberOfResults As Short,  _
                    ByVal ParameterName1 As String,  _
                    ByVal USL1 As Double,  _
                    ByVal UCL1 As Double,  _
                    ByVal NOM1 As Double,  _
                    ByVal LCL1 As Double,  _
                    ByVal LSL1 As Double,  _
                    ByVal SampleSize1 As Short,  _
                    ByVal SampleFrequency1 As Short,  _
                    ByVal NumberofSubGroups1 As Short,  _
                    ByVal ParameterName2 As String,  _
                    ByVal USL2 As Double,  _
                    ByVal UCL2 As Double,  _
                    ByVal NOM2 As Double,  _
                    ByVal LCL2 As Double,  _
                    ByVal LSL2 As Double,  _
                    ByVal SampleSize2 As Short,  _
                    ByVal SampleFrequency2 As Short,  _
                    ByVal NumberofSubGroups2 As Short,  _
                    ByVal ParameterName3 As String,  _
                    ByVal USL3 As Double,  _
                    ByVal UCL3 As Double,  _
                    ByVal NOM3 As Double,  _
                    ByVal LCL3 As Double,  _
                    ByVal LSL3 As Double,  _
                    ByVal SampleSize3 As Short,  _
                    ByVal SampleFrequency3 As Short,  _
                    ByVal NumberofSubGroups3 As Short,  _
                    ByVal ParameterName4 As String,  _
                    ByVal USL4 As Double,  _
                    ByVal UCL4 As Double,  _
                    ByVal NOM4 As Double,  _
                    ByVal LCL4 As Double,  _
                    ByVal LSL4 As Double,  _
                    ByVal SampleSize4 As Short,  _
                    ByVal SampleFrequency4 As Short,  _
                    ByVal NumberofSubGroups4 As Short,  _
                    ByVal ParameterName5 As String,  _
                    ByVal USL5 As Double,  _
                    ByVal UCL5 As Double,  _
                    ByVal NOM5 As Double,  _
                    ByVal LCL5 As Double,  _
                    ByVal LSL5 As Double,  _
                    ByVal SampleSize5 As Short,  _
                    ByVal SampleFrequency5 As Short,  _
                    ByVal NumberofSubGroups5 As Short,  _
                    ByVal ParameterName6 As String,  _
                    ByVal USL6 As Double,  _
                    ByVal UCL6 As Double,  _
                    ByVal NOM6 As Double,  _
                    ByVal LCL6 As Double,  _
                    ByVal LSL6 As Double,  _
                    ByVal SampleSize6 As Short,  _
                    ByVal SampleFrequency6 As Short,  _
                    ByVal NumberofSubGroups6 As Short,  _
                    ByVal ParameterName7 As String,  _
                    ByVal USL7 As Double,  _
                    ByVal UCL7 As Double,  _
                    ByVal NOM7 As Double,  _
                    ByVal LCL7 As Double,  _
                    ByVal LSL7 As Double,  _
                    ByVal SampleSize7 As Short,  _
                    ByVal SampleFrequency7 As Short,  _
                    ByVal NumberofSubGroups7 As Short,  _
                    ByVal ParameterName8 As String,  _
                    ByVal USL8 As Double,  _
                    ByVal UCL8 As Double,  _
                    ByVal NOM8 As Double,  _
                    ByVal LCL8 As Double,  _
                    ByVal LSL8 As Double,  _
                    ByVal SampleSize8 As Short,  _
                    ByVal SampleFrequency8 As Short,  _
                    ByVal NumberofSubGroups8 As Short,  _
                    ByVal uslcolor As String,  _
                    ByVal uclcolor As String,  _
                    ByVal nvcolor As String,  _
                    ByVal lclcolor As String,  _
                    ByVal lslcolor As String,  _
                    ByVal machinenum As String,  _
                    ByVal numberofparameters As Integer) As CustomerOctaGageRow
            Dim rowCustomerOctaGageRow As CustomerOctaGageRow = CType(Me.NewRow,CustomerOctaGageRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PartName, Organisation, AddressLine1, AddressLine2, AddressLine3, operatorname, NumberOfResults, ParameterName1, USL1, UCL1, NOM1, LCL1, LSL1, SampleSize1, SampleFrequency1, NumberofSubGroups1, ParameterName2, USL2, UCL2, NOM2, LCL2, LSL2, SampleSize2, SampleFrequency2, NumberofSubGroups2, ParameterName3, USL3, UCL3, NOM3, LCL3, LSL3, SampleSize3, SampleFrequency3, NumberofSubGroups3, ParameterName4, USL4, UCL4, NOM4, LCL4, LSL4, SampleSize4, SampleFrequency4, NumberofSubGroups4, ParameterName5, USL5, UCL5, NOM5, LCL5, LSL5, SampleSize5, SampleFrequency5, NumberofSubGroups5, ParameterName6, USL6, UCL6, NOM6, LCL6, LSL6, SampleSize6, SampleFrequency6, NumberofSubGroups6, ParameterName7, USL7, UCL7, NOM7, LCL7, LSL7, SampleSize7, SampleFrequency7, NumberofSubGroups7, ParameterName8, USL8, UCL8, NOM8, LCL8, LSL8, SampleSize8, SampleFrequency8, NumberofSubGroups8, uslcolor, uclcolor, nvcolor, lclcolor, lslcolor, machinenum, numberofparameters}
            rowCustomerOctaGageRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomerOctaGageRow)
            Return rowCustomerOctaGageRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPartID(ByVal PartID As Integer) As CustomerOctaGageRow
            Return CType(Me.Rows.Find(New Object() {PartID}),CustomerOctaGageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomerOctaGageDataTable = CType(MyBase.Clone,CustomerOctaGageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomerOctaGageDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPartID = MyBase.Columns("PartID")
            Me.columnPartName = MyBase.Columns("PartName")
            Me.columnOrganisation = MyBase.Columns("Organisation")
            Me.columnAddressLine1 = MyBase.Columns("AddressLine1")
            Me.columnAddressLine2 = MyBase.Columns("AddressLine2")
            Me.columnAddressLine3 = MyBase.Columns("AddressLine3")
            Me.columnoperatorname = MyBase.Columns("operatorname")
            Me.columnNumberOfResults = MyBase.Columns("NumberOfResults")
            Me.columnParameterName1 = MyBase.Columns("ParameterName1")
            Me.columnUSL1 = MyBase.Columns("USL1")
            Me.columnUCL1 = MyBase.Columns("UCL1")
            Me.columnNOM1 = MyBase.Columns("NOM1")
            Me.columnLCL1 = MyBase.Columns("LCL1")
            Me.columnLSL1 = MyBase.Columns("LSL1")
            Me.columnSampleSize1 = MyBase.Columns("SampleSize1")
            Me.columnSampleFrequency1 = MyBase.Columns("SampleFrequency1")
            Me.columnNumberofSubGroups1 = MyBase.Columns("NumberofSubGroups1")
            Me.columnParameterName2 = MyBase.Columns("ParameterName2")
            Me.columnUSL2 = MyBase.Columns("USL2")
            Me.columnUCL2 = MyBase.Columns("UCL2")
            Me.columnNOM2 = MyBase.Columns("NOM2")
            Me.columnLCL2 = MyBase.Columns("LCL2")
            Me.columnLSL2 = MyBase.Columns("LSL2")
            Me.columnSampleSize2 = MyBase.Columns("SampleSize2")
            Me.columnSampleFrequency2 = MyBase.Columns("SampleFrequency2")
            Me.columnNumberofSubGroups2 = MyBase.Columns("NumberofSubGroups2")
            Me.columnParameterName3 = MyBase.Columns("ParameterName3")
            Me.columnUSL3 = MyBase.Columns("USL3")
            Me.columnUCL3 = MyBase.Columns("UCL3")
            Me.columnNOM3 = MyBase.Columns("NOM3")
            Me.columnLCL3 = MyBase.Columns("LCL3")
            Me.columnLSL3 = MyBase.Columns("LSL3")
            Me.columnSampleSize3 = MyBase.Columns("SampleSize3")
            Me.columnSampleFrequency3 = MyBase.Columns("SampleFrequency3")
            Me.columnNumberofSubGroups3 = MyBase.Columns("NumberofSubGroups3")
            Me.columnParameterName4 = MyBase.Columns("ParameterName4")
            Me.columnUSL4 = MyBase.Columns("USL4")
            Me.columnUCL4 = MyBase.Columns("UCL4")
            Me.columnNOM4 = MyBase.Columns("NOM4")
            Me.columnLCL4 = MyBase.Columns("LCL4")
            Me.columnLSL4 = MyBase.Columns("LSL4")
            Me.columnSampleSize4 = MyBase.Columns("SampleSize4")
            Me.columnSampleFrequency4 = MyBase.Columns("SampleFrequency4")
            Me.columnNumberofSubGroups4 = MyBase.Columns("NumberofSubGroups4")
            Me.columnParameterName5 = MyBase.Columns("ParameterName5")
            Me.columnUSL5 = MyBase.Columns("USL5")
            Me.columnUCL5 = MyBase.Columns("UCL5")
            Me.columnNOM5 = MyBase.Columns("NOM5")
            Me.columnLCL5 = MyBase.Columns("LCL5")
            Me.columnLSL5 = MyBase.Columns("LSL5")
            Me.columnSampleSize5 = MyBase.Columns("SampleSize5")
            Me.columnSampleFrequency5 = MyBase.Columns("SampleFrequency5")
            Me.columnNumberofSubGroups5 = MyBase.Columns("NumberofSubGroups5")
            Me.columnParameterName6 = MyBase.Columns("ParameterName6")
            Me.columnUSL6 = MyBase.Columns("USL6")
            Me.columnUCL6 = MyBase.Columns("UCL6")
            Me.columnNOM6 = MyBase.Columns("NOM6")
            Me.columnLCL6 = MyBase.Columns("LCL6")
            Me.columnLSL6 = MyBase.Columns("LSL6")
            Me.columnSampleSize6 = MyBase.Columns("SampleSize6")
            Me.columnSampleFrequency6 = MyBase.Columns("SampleFrequency6")
            Me.columnNumberofSubGroups6 = MyBase.Columns("NumberofSubGroups6")
            Me.columnParameterName7 = MyBase.Columns("ParameterName7")
            Me.columnUSL7 = MyBase.Columns("USL7")
            Me.columnUCL7 = MyBase.Columns("UCL7")
            Me.columnNOM7 = MyBase.Columns("NOM7")
            Me.columnLCL7 = MyBase.Columns("LCL7")
            Me.columnLSL7 = MyBase.Columns("LSL7")
            Me.columnSampleSize7 = MyBase.Columns("SampleSize7")
            Me.columnSampleFrequency7 = MyBase.Columns("SampleFrequency7")
            Me.columnNumberofSubGroups7 = MyBase.Columns("NumberofSubGroups7")
            Me.columnParameterName8 = MyBase.Columns("ParameterName8")
            Me.columnUSL8 = MyBase.Columns("USL8")
            Me.columnUCL8 = MyBase.Columns("UCL8")
            Me.columnNOM8 = MyBase.Columns("NOM8")
            Me.columnLCL8 = MyBase.Columns("LCL8")
            Me.columnLSL8 = MyBase.Columns("LSL8")
            Me.columnSampleSize8 = MyBase.Columns("SampleSize8")
            Me.columnSampleFrequency8 = MyBase.Columns("SampleFrequency8")
            Me.columnNumberofSubGroups8 = MyBase.Columns("NumberofSubGroups8")
            Me.columnuslcolor = MyBase.Columns("uslcolor")
            Me.columnuclcolor = MyBase.Columns("uclcolor")
            Me.columnnvcolor = MyBase.Columns("nvcolor")
            Me.columnlclcolor = MyBase.Columns("lclcolor")
            Me.columnlslcolor = MyBase.Columns("lslcolor")
            Me.columnmachinenum = MyBase.Columns("machinenum")
            Me.columnnumberofparameters = MyBase.Columns("numberofparameters")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPartID = New Global.System.Data.DataColumn("PartID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartID)
            Me.columnPartName = New Global.System.Data.DataColumn("PartName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartName)
            Me.columnOrganisation = New Global.System.Data.DataColumn("Organisation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganisation)
            Me.columnAddressLine1 = New Global.System.Data.DataColumn("AddressLine1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine1)
            Me.columnAddressLine2 = New Global.System.Data.DataColumn("AddressLine2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New Global.System.Data.DataColumn("AddressLine3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine3)
            Me.columnoperatorname = New Global.System.Data.DataColumn("operatorname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoperatorname)
            Me.columnNumberOfResults = New Global.System.Data.DataColumn("NumberOfResults", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberOfResults)
            Me.columnParameterName1 = New Global.System.Data.DataColumn("ParameterName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName1)
            Me.columnUSL1 = New Global.System.Data.DataColumn("USL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL1)
            Me.columnUCL1 = New Global.System.Data.DataColumn("UCL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL1)
            Me.columnNOM1 = New Global.System.Data.DataColumn("NOM1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM1)
            Me.columnLCL1 = New Global.System.Data.DataColumn("LCL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL1)
            Me.columnLSL1 = New Global.System.Data.DataColumn("LSL1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL1)
            Me.columnSampleSize1 = New Global.System.Data.DataColumn("SampleSize1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize1)
            Me.columnSampleFrequency1 = New Global.System.Data.DataColumn("SampleFrequency1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency1)
            Me.columnNumberofSubGroups1 = New Global.System.Data.DataColumn("NumberofSubGroups1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups1)
            Me.columnParameterName2 = New Global.System.Data.DataColumn("ParameterName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName2)
            Me.columnUSL2 = New Global.System.Data.DataColumn("USL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL2)
            Me.columnUCL2 = New Global.System.Data.DataColumn("UCL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL2)
            Me.columnNOM2 = New Global.System.Data.DataColumn("NOM2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM2)
            Me.columnLCL2 = New Global.System.Data.DataColumn("LCL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL2)
            Me.columnLSL2 = New Global.System.Data.DataColumn("LSL2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL2)
            Me.columnSampleSize2 = New Global.System.Data.DataColumn("SampleSize2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize2)
            Me.columnSampleFrequency2 = New Global.System.Data.DataColumn("SampleFrequency2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency2)
            Me.columnNumberofSubGroups2 = New Global.System.Data.DataColumn("NumberofSubGroups2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups2)
            Me.columnParameterName3 = New Global.System.Data.DataColumn("ParameterName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName3)
            Me.columnUSL3 = New Global.System.Data.DataColumn("USL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL3)
            Me.columnUCL3 = New Global.System.Data.DataColumn("UCL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL3)
            Me.columnNOM3 = New Global.System.Data.DataColumn("NOM3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM3)
            Me.columnLCL3 = New Global.System.Data.DataColumn("LCL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL3)
            Me.columnLSL3 = New Global.System.Data.DataColumn("LSL3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL3)
            Me.columnSampleSize3 = New Global.System.Data.DataColumn("SampleSize3", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize3)
            Me.columnSampleFrequency3 = New Global.System.Data.DataColumn("SampleFrequency3", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency3)
            Me.columnNumberofSubGroups3 = New Global.System.Data.DataColumn("NumberofSubGroups3", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups3)
            Me.columnParameterName4 = New Global.System.Data.DataColumn("ParameterName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName4)
            Me.columnUSL4 = New Global.System.Data.DataColumn("USL4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL4)
            Me.columnUCL4 = New Global.System.Data.DataColumn("UCL4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL4)
            Me.columnNOM4 = New Global.System.Data.DataColumn("NOM4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM4)
            Me.columnLCL4 = New Global.System.Data.DataColumn("LCL4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL4)
            Me.columnLSL4 = New Global.System.Data.DataColumn("LSL4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL4)
            Me.columnSampleSize4 = New Global.System.Data.DataColumn("SampleSize4", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize4)
            Me.columnSampleFrequency4 = New Global.System.Data.DataColumn("SampleFrequency4", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency4)
            Me.columnNumberofSubGroups4 = New Global.System.Data.DataColumn("NumberofSubGroups4", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups4)
            Me.columnParameterName5 = New Global.System.Data.DataColumn("ParameterName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName5)
            Me.columnUSL5 = New Global.System.Data.DataColumn("USL5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL5)
            Me.columnUCL5 = New Global.System.Data.DataColumn("UCL5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL5)
            Me.columnNOM5 = New Global.System.Data.DataColumn("NOM5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM5)
            Me.columnLCL5 = New Global.System.Data.DataColumn("LCL5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL5)
            Me.columnLSL5 = New Global.System.Data.DataColumn("LSL5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL5)
            Me.columnSampleSize5 = New Global.System.Data.DataColumn("SampleSize5", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize5)
            Me.columnSampleFrequency5 = New Global.System.Data.DataColumn("SampleFrequency5", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency5)
            Me.columnNumberofSubGroups5 = New Global.System.Data.DataColumn("NumberofSubGroups5", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups5)
            Me.columnParameterName6 = New Global.System.Data.DataColumn("ParameterName6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName6)
            Me.columnUSL6 = New Global.System.Data.DataColumn("USL6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL6)
            Me.columnUCL6 = New Global.System.Data.DataColumn("UCL6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL6)
            Me.columnNOM6 = New Global.System.Data.DataColumn("NOM6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM6)
            Me.columnLCL6 = New Global.System.Data.DataColumn("LCL6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL6)
            Me.columnLSL6 = New Global.System.Data.DataColumn("LSL6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL6)
            Me.columnSampleSize6 = New Global.System.Data.DataColumn("SampleSize6", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize6)
            Me.columnSampleFrequency6 = New Global.System.Data.DataColumn("SampleFrequency6", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency6)
            Me.columnNumberofSubGroups6 = New Global.System.Data.DataColumn("NumberofSubGroups6", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups6)
            Me.columnParameterName7 = New Global.System.Data.DataColumn("ParameterName7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName7)
            Me.columnUSL7 = New Global.System.Data.DataColumn("USL7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL7)
            Me.columnUCL7 = New Global.System.Data.DataColumn("UCL7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL7)
            Me.columnNOM7 = New Global.System.Data.DataColumn("NOM7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM7)
            Me.columnLCL7 = New Global.System.Data.DataColumn("LCL7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL7)
            Me.columnLSL7 = New Global.System.Data.DataColumn("LSL7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL7)
            Me.columnSampleSize7 = New Global.System.Data.DataColumn("SampleSize7", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize7)
            Me.columnSampleFrequency7 = New Global.System.Data.DataColumn("SampleFrequency7", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency7)
            Me.columnNumberofSubGroups7 = New Global.System.Data.DataColumn("NumberofSubGroups7", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups7)
            Me.columnParameterName8 = New Global.System.Data.DataColumn("ParameterName8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName8)
            Me.columnUSL8 = New Global.System.Data.DataColumn("USL8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL8)
            Me.columnUCL8 = New Global.System.Data.DataColumn("UCL8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL8)
            Me.columnNOM8 = New Global.System.Data.DataColumn("NOM8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM8)
            Me.columnLCL8 = New Global.System.Data.DataColumn("LCL8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL8)
            Me.columnLSL8 = New Global.System.Data.DataColumn("LSL8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL8)
            Me.columnSampleSize8 = New Global.System.Data.DataColumn("SampleSize8", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize8)
            Me.columnSampleFrequency8 = New Global.System.Data.DataColumn("SampleFrequency8", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency8)
            Me.columnNumberofSubGroups8 = New Global.System.Data.DataColumn("NumberofSubGroups8", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups8)
            Me.columnuslcolor = New Global.System.Data.DataColumn("uslcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuslcolor)
            Me.columnuclcolor = New Global.System.Data.DataColumn("uclcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuclcolor)
            Me.columnnvcolor = New Global.System.Data.DataColumn("nvcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnvcolor)
            Me.columnlclcolor = New Global.System.Data.DataColumn("lclcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlclcolor)
            Me.columnlslcolor = New Global.System.Data.DataColumn("lslcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlslcolor)
            Me.columnmachinenum = New Global.System.Data.DataColumn("machinenum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmachinenum)
            Me.columnnumberofparameters = New Global.System.Data.DataColumn("numberofparameters", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumberofparameters)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPartID}, true))
            Me.columnPartID.AutoIncrement = true
            Me.columnPartID.AutoIncrementSeed = -1
            Me.columnPartID.AutoIncrementStep = -1
            Me.columnPartID.AllowDBNull = false
            Me.columnPartID.Unique = true
            Me.columnPartName.MaxLength = 255
            Me.columnOrganisation.MaxLength = 50
            Me.columnAddressLine1.MaxLength = 50
            Me.columnAddressLine2.MaxLength = 50
            Me.columnAddressLine3.MaxLength = 50
            Me.columnoperatorname.MaxLength = 50
            Me.columnParameterName1.MaxLength = 50
            Me.columnParameterName2.MaxLength = 50
            Me.columnParameterName3.MaxLength = 50
            Me.columnParameterName4.MaxLength = 50
            Me.columnParameterName5.MaxLength = 50
            Me.columnParameterName6.MaxLength = 50
            Me.columnParameterName7.MaxLength = 50
            Me.columnParameterName8.MaxLength = 50
            Me.columnuslcolor.MaxLength = 255
            Me.columnuclcolor.MaxLength = 255
            Me.columnnvcolor.MaxLength = 255
            Me.columnlclcolor.MaxLength = 255
            Me.columnlslcolor.MaxLength = 255
            Me.columnmachinenum.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustomerOctaGageRow() As CustomerOctaGageRow
            Return CType(Me.NewRow,CustomerOctaGageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomerOctaGageRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomerOctaGageRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerOctaGageRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerOctaGageRowChanged(Me, New CustomerOctaGageRowChangeEvent(CType(e.Row,CustomerOctaGageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerOctaGageRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerOctaGageRowChanging(Me, New CustomerOctaGageRowChangeEvent(CType(e.Row,CustomerOctaGageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerOctaGageRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerOctaGageRowDeleted(Me, New CustomerOctaGageRowChangeEvent(CType(e.Row,CustomerOctaGageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerOctaGageRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerOctaGageRowDeleting(Me, New CustomerOctaGageRowChangeEvent(CType(e.Row,CustomerOctaGageRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustomerOctaGageRow(ByVal row As CustomerOctaGageRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerOctaGageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerTriColorColumnDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncustomerId As Global.System.Data.DataColumn
        
        Private columnOrganisation As Global.System.Data.DataColumn
        
        Private columnAddressLine1 As Global.System.Data.DataColumn
        
        Private columnAddressLine2 As Global.System.Data.DataColumn
        
        Private columnAddressLine3 As Global.System.Data.DataColumn
        
        Private columnContactPerson As Global.System.Data.DataColumn
        
        Private columnParameterName As Global.System.Data.DataColumn
        
        Private columnUSL As Global.System.Data.DataColumn
        
        Private columnUCL As Global.System.Data.DataColumn
        
        Private columnNOM As Global.System.Data.DataColumn
        
        Private columnLCL As Global.System.Data.DataColumn
        
        Private columnLSL As Global.System.Data.DataColumn
        
        Private columnSampleSize As Global.System.Data.DataColumn
        
        Private columnSampleFrequency As Global.System.Data.DataColumn
        
        Private columnNumberofSubGroups As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomerTriColorColumn"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customerIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomerId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganisationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganisation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressLine3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPerson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParameterNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParameterName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LSLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLSL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleSizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleSize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleFrequencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleFrequency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberofSubGroupsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberofSubGroups
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerTriColorColumnRow
            Get
                Return CType(Me.Rows(index),CustomerTriColorColumnRow)
            End Get
        End Property
        
        Public Event CustomerTriColorColumnRowChanging As CustomerTriColorColumnRowChangeEventHandler
        
        Public Event CustomerTriColorColumnRowChanged As CustomerTriColorColumnRowChangeEventHandler
        
        Public Event CustomerTriColorColumnRowDeleting As CustomerTriColorColumnRowChangeEventHandler
        
        Public Event CustomerTriColorColumnRowDeleted As CustomerTriColorColumnRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustomerTriColorColumnRow(ByVal row As CustomerTriColorColumnRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustomerTriColorColumnRow(ByVal customerId As Integer, ByVal Organisation As String, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal ContactPerson As String, ByVal ParameterName As String, ByVal USL As Single, ByVal UCL As Single, ByVal NOM As Single, ByVal LCL As Single, ByVal LSL As Single, ByVal SampleSize As Short, ByVal SampleFrequency As Short, ByVal NumberofSubGroups As Short) As CustomerTriColorColumnRow
            Dim rowCustomerTriColorColumnRow As CustomerTriColorColumnRow = CType(Me.NewRow,CustomerTriColorColumnRow)
            Dim columnValuesArray() As Object = New Object() {customerId, Organisation, AddressLine1, AddressLine2, AddressLine3, ContactPerson, ParameterName, USL, UCL, NOM, LCL, LSL, SampleSize, SampleFrequency, NumberofSubGroups}
            rowCustomerTriColorColumnRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomerTriColorColumnRow)
            Return rowCustomerTriColorColumnRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycustomerId(ByVal customerId As Integer) As CustomerTriColorColumnRow
            Return CType(Me.Rows.Find(New Object() {customerId}),CustomerTriColorColumnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomerTriColorColumnDataTable = CType(MyBase.Clone,CustomerTriColorColumnDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomerTriColorColumnDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncustomerId = MyBase.Columns("customerId")
            Me.columnOrganisation = MyBase.Columns("Organisation")
            Me.columnAddressLine1 = MyBase.Columns("AddressLine1")
            Me.columnAddressLine2 = MyBase.Columns("AddressLine2")
            Me.columnAddressLine3 = MyBase.Columns("AddressLine3")
            Me.columnContactPerson = MyBase.Columns("ContactPerson")
            Me.columnParameterName = MyBase.Columns("ParameterName")
            Me.columnUSL = MyBase.Columns("USL")
            Me.columnUCL = MyBase.Columns("UCL")
            Me.columnNOM = MyBase.Columns("NOM")
            Me.columnLCL = MyBase.Columns("LCL")
            Me.columnLSL = MyBase.Columns("LSL")
            Me.columnSampleSize = MyBase.Columns("SampleSize")
            Me.columnSampleFrequency = MyBase.Columns("SampleFrequency")
            Me.columnNumberofSubGroups = MyBase.Columns("NumberofSubGroups")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncustomerId = New Global.System.Data.DataColumn("customerId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomerId)
            Me.columnOrganisation = New Global.System.Data.DataColumn("Organisation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganisation)
            Me.columnAddressLine1 = New Global.System.Data.DataColumn("AddressLine1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine1)
            Me.columnAddressLine2 = New Global.System.Data.DataColumn("AddressLine2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New Global.System.Data.DataColumn("AddressLine3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressLine3)
            Me.columnContactPerson = New Global.System.Data.DataColumn("ContactPerson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPerson)
            Me.columnParameterName = New Global.System.Data.DataColumn("ParameterName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParameterName)
            Me.columnUSL = New Global.System.Data.DataColumn("USL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSL)
            Me.columnUCL = New Global.System.Data.DataColumn("UCL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUCL)
            Me.columnNOM = New Global.System.Data.DataColumn("NOM", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOM)
            Me.columnLCL = New Global.System.Data.DataColumn("LCL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL)
            Me.columnLSL = New Global.System.Data.DataColumn("LSL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLSL)
            Me.columnSampleSize = New Global.System.Data.DataColumn("SampleSize", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleSize)
            Me.columnSampleFrequency = New Global.System.Data.DataColumn("SampleFrequency", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleFrequency)
            Me.columnNumberofSubGroups = New Global.System.Data.DataColumn("NumberofSubGroups", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberofSubGroups)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncustomerId}, true))
            Me.columncustomerId.AllowDBNull = false
            Me.columncustomerId.Unique = true
            Me.columnOrganisation.MaxLength = 50
            Me.columnAddressLine1.MaxLength = 50
            Me.columnAddressLine2.MaxLength = 50
            Me.columnAddressLine3.MaxLength = 50
            Me.columnContactPerson.MaxLength = 50
            Me.columnParameterName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustomerTriColorColumnRow() As CustomerTriColorColumnRow
            Return CType(Me.NewRow,CustomerTriColorColumnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomerTriColorColumnRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomerTriColorColumnRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerTriColorColumnRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerTriColorColumnRowChanged(Me, New CustomerTriColorColumnRowChangeEvent(CType(e.Row,CustomerTriColorColumnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerTriColorColumnRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerTriColorColumnRowChanging(Me, New CustomerTriColorColumnRowChangeEvent(CType(e.Row,CustomerTriColorColumnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerTriColorColumnRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerTriColorColumnRowDeleted(Me, New CustomerTriColorColumnRowChangeEvent(CType(e.Row,CustomerTriColorColumnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerTriColorColumnRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerTriColorColumnRowDeleting(Me, New CustomerTriColorColumnRowChangeEvent(CType(e.Row,CustomerTriColorColumnRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustomerTriColorColumnRow(ByVal row As CustomerTriColorColumnRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerTriColorColumnDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LoginDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnuser_name As Global.System.Data.DataColumn
        
        Private columnpass As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Login"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property user_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuser_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property passColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpass
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LoginRow
            Get
                Return CType(Me.Rows(index),LoginRow)
            End Get
        End Property
        
        Public Event LoginRowChanging As LoginRowChangeEventHandler
        
        Public Event LoginRowChanged As LoginRowChangeEventHandler
        
        Public Event LoginRowDeleting As LoginRowChangeEventHandler
        
        Public Event LoginRowDeleted As LoginRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLoginRow(ByVal row As LoginRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLoginRow(ByVal user_name As String, ByVal pass As String) As LoginRow
            Dim rowLoginRow As LoginRow = CType(Me.NewRow,LoginRow)
            Dim columnValuesArray() As Object = New Object() {user_name, pass}
            rowLoginRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLoginRow)
            Return rowLoginRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LoginDataTable = CType(MyBase.Clone,LoginDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LoginDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnuser_name = MyBase.Columns("user_name")
            Me.columnpass = MyBase.Columns("pass")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnuser_name = New Global.System.Data.DataColumn("user_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuser_name)
            Me.columnpass = New Global.System.Data.DataColumn("pass", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpass)
            Me.columnuser_name.MaxLength = 50
            Me.columnpass.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLoginRow() As LoginRow
            Return CType(Me.NewRow,LoginRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LoginRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LoginRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LoginRowChangedEvent) Is Nothing) Then
                RaiseEvent LoginRowChanged(Me, New LoginRowChangeEvent(CType(e.Row,LoginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LoginRowChangingEvent) Is Nothing) Then
                RaiseEvent LoginRowChanging(Me, New LoginRowChangeEvent(CType(e.Row,LoginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LoginRowDeletedEvent) Is Nothing) Then
                RaiseEvent LoginRowDeleted(Me, New LoginRowChangeEvent(CType(e.Row,LoginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LoginRowDeletingEvent) Is Nothing) Then
                RaiseEvent LoginRowDeleting(Me, New LoginRowChangeEvent(CType(e.Row,LoginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLoginRow(ByVal row As LoginRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LoginDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class partdetailsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnpartId As Global.System.Data.DataColumn
        
        Private columnpartname As Global.System.Data.DataColumn
        
        Private columncustomername As Global.System.Data.DataColumn
        
        Private columnusl As Global.System.Data.DataColumn
        
        Private columnucl As Global.System.Data.DataColumn
        
        Private columnnv As Global.System.Data.DataColumn
        
        Private columnlcl As Global.System.Data.DataColumn
        
        Private columnlsl As Global.System.Data.DataColumn
        
        Private columnuslcolor As Global.System.Data.DataColumn
        
        Private columnuclcolor As Global.System.Data.DataColumn
        
        Private columnnvcolor As Global.System.Data.DataColumn
        
        Private columnlclcolor As Global.System.Data.DataColumn
        
        Private columnlslcolor As Global.System.Data.DataColumn
        
        Private columnparamname As Global.System.Data.DataColumn
        
        Private columnoperatorname As Global.System.Data.DataColumn
        
        Private columnmachinenum As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "partdetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property partIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property partnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property customernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustomername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uslColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnucl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lclColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlcl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lslColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlsl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uslcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuslcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property uclcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuclcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nvcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnvcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lclcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlclcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lslcolorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlslcolor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paramnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnparamname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property operatornameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoperatorname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property machinenumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmachinenum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As partdetailsRow
            Get
                Return CType(Me.Rows(index),partdetailsRow)
            End Get
        End Property
        
        Public Event partdetailsRowChanging As partdetailsRowChangeEventHandler
        
        Public Event partdetailsRowChanged As partdetailsRowChangeEventHandler
        
        Public Event partdetailsRowDeleting As partdetailsRowChangeEventHandler
        
        Public Event partdetailsRowDeleted As partdetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpartdetailsRow(ByVal row As partdetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpartdetailsRow(ByVal partname As String, ByVal customername As String, ByVal usl As Double, ByVal ucl As Double, ByVal nv As Double, ByVal lcl As Double, ByVal lsl As Double, ByVal uslcolor As String, ByVal uclcolor As String, ByVal nvcolor As String, ByVal lclcolor As String, ByVal lslcolor As String, ByVal paramname As String, ByVal operatorname As String, ByVal machinenum As String) As partdetailsRow
            Dim rowpartdetailsRow As partdetailsRow = CType(Me.NewRow,partdetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, partname, customername, usl, ucl, nv, lcl, lsl, uslcolor, uclcolor, nvcolor, lclcolor, lslcolor, paramname, operatorname, machinenum}
            rowpartdetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowpartdetailsRow)
            Return rowpartdetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypartId(ByVal partId As Integer) As partdetailsRow
            Return CType(Me.Rows.Find(New Object() {partId}),partdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As partdetailsDataTable = CType(MyBase.Clone,partdetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New partdetailsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpartId = MyBase.Columns("partId")
            Me.columnpartname = MyBase.Columns("partname")
            Me.columncustomername = MyBase.Columns("customername")
            Me.columnusl = MyBase.Columns("usl")
            Me.columnucl = MyBase.Columns("ucl")
            Me.columnnv = MyBase.Columns("nv")
            Me.columnlcl = MyBase.Columns("lcl")
            Me.columnlsl = MyBase.Columns("lsl")
            Me.columnuslcolor = MyBase.Columns("uslcolor")
            Me.columnuclcolor = MyBase.Columns("uclcolor")
            Me.columnnvcolor = MyBase.Columns("nvcolor")
            Me.columnlclcolor = MyBase.Columns("lclcolor")
            Me.columnlslcolor = MyBase.Columns("lslcolor")
            Me.columnparamname = MyBase.Columns("paramname")
            Me.columnoperatorname = MyBase.Columns("operatorname")
            Me.columnmachinenum = MyBase.Columns("machinenum")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpartId = New Global.System.Data.DataColumn("partId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartId)
            Me.columnpartname = New Global.System.Data.DataColumn("partname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartname)
            Me.columncustomername = New Global.System.Data.DataColumn("customername", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustomername)
            Me.columnusl = New Global.System.Data.DataColumn("usl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusl)
            Me.columnucl = New Global.System.Data.DataColumn("ucl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnucl)
            Me.columnnv = New Global.System.Data.DataColumn("nv", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnv)
            Me.columnlcl = New Global.System.Data.DataColumn("lcl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlcl)
            Me.columnlsl = New Global.System.Data.DataColumn("lsl", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlsl)
            Me.columnuslcolor = New Global.System.Data.DataColumn("uslcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuslcolor)
            Me.columnuclcolor = New Global.System.Data.DataColumn("uclcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuclcolor)
            Me.columnnvcolor = New Global.System.Data.DataColumn("nvcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnvcolor)
            Me.columnlclcolor = New Global.System.Data.DataColumn("lclcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlclcolor)
            Me.columnlslcolor = New Global.System.Data.DataColumn("lslcolor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlslcolor)
            Me.columnparamname = New Global.System.Data.DataColumn("paramname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnparamname)
            Me.columnoperatorname = New Global.System.Data.DataColumn("operatorname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoperatorname)
            Me.columnmachinenum = New Global.System.Data.DataColumn("machinenum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmachinenum)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnpartId}, true))
            Me.columnpartId.AutoIncrement = true
            Me.columnpartId.AutoIncrementSeed = -1
            Me.columnpartId.AutoIncrementStep = -1
            Me.columnpartId.AllowDBNull = false
            Me.columnpartId.Unique = true
            Me.columnpartname.MaxLength = 50
            Me.columncustomername.MaxLength = 255
            Me.columnuslcolor.MaxLength = 255
            Me.columnuclcolor.MaxLength = 255
            Me.columnnvcolor.MaxLength = 255
            Me.columnlclcolor.MaxLength = 255
            Me.columnlslcolor.MaxLength = 255
            Me.columnparamname.MaxLength = 255
            Me.columnoperatorname.MaxLength = 255
            Me.columnmachinenum.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpartdetailsRow() As partdetailsRow
            Return CType(Me.NewRow,partdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New partdetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(partdetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partdetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent partdetailsRowChanged(Me, New partdetailsRowChangeEvent(CType(e.Row,partdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partdetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent partdetailsRowChanging(Me, New partdetailsRowChangeEvent(CType(e.Row,partdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partdetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent partdetailsRowDeleted(Me, New partdetailsRowChangeEvent(CType(e.Row,partdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partdetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent partdetailsRowDeleting(Me, New partdetailsRowChangeEvent(CType(e.Row,partdetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepartdetailsRow(ByVal row As partdetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As VersaGageMonitorDataSet = New VersaGageMonitorDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "partdetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CommunicationPortRow
        Inherits Global.System.Data.DataRow
        
        Private tableCommunicationPort As CommunicationPortDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCommunicationPort = CType(Me.Table,CommunicationPortDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Port() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.PortColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Port' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.PortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Baud_Rate() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.Baud_RateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Baud_Rate' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.Baud_RateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Data_Bits() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.Data_BitsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Data_Bits' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.Data_BitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parity() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.ParityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Parity' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.ParityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stop_Bit() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.Stop_BitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stop_Bit' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.Stop_BitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flow_Control() As String
            Get
                Try 
                    Return CType(Me(Me.tableCommunicationPort.Flow_ControlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flow_Control' in table 'CommunicationPort' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCommunicationPort.Flow_ControlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPortNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.PortColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPortNull()
            Me(Me.tableCommunicationPort.PortColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBaud_RateNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.Baud_RateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBaud_RateNull()
            Me(Me.tableCommunicationPort.Baud_RateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsData_BitsNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.Data_BitsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetData_BitsNull()
            Me(Me.tableCommunicationPort.Data_BitsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParityNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.ParityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParityNull()
            Me(Me.tableCommunicationPort.ParityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStop_BitNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.Stop_BitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStop_BitNull()
            Me(Me.tableCommunicationPort.Stop_BitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlow_ControlNull() As Boolean
            Return Me.IsNull(Me.tableCommunicationPort.Flow_ControlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlow_ControlNull()
            Me(Me.tableCommunicationPort.Flow_ControlColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustmerInterfaceBoxRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustmerInterfaceBox As CustmerInterfaceBoxDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustmerInterfaceBox = CType(Me.Table,CustmerInterfaceBoxDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organisation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.OrganisationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organisation' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.OrganisationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.AddressLine1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine1' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.AddressLine1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.AddressLine2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine2' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.AddressLine2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.AddressLine3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine3' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.AddressLine3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPerson() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ContactPersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPerson' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberOfChanels() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.NumberOfChanelsColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberOfChanels' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.NumberOfChanelsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChanelFormat() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ChanelFormatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChanelFormat' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ChanelFormatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChanelPrefix() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ChanelPrefixColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChanelPrefix' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ChanelPrefixColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChanelNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ChanelNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChanelNumber' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ChanelNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChanelValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ChanelValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChanelValue' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ChanelValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChanelSuffix() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.ChanelSuffixColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChanelSuffix' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.ChanelSuffixColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.SampleSizeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.SampleSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.SampleFrequencyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency' in table 'CustmerInterfaceBox' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.SampleFrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustmerInterfaceBox.NumberofSubGroupsColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups' in table 'CustmerInterfaceBox' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCustmerInterfaceBox.NumberofSubGroupsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganisationNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.OrganisationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganisationNull()
            Me(Me.tableCustmerInterfaceBox.OrganisationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine1Null() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.AddressLine1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine1Null()
            Me(Me.tableCustmerInterfaceBox.AddressLine1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.AddressLine2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine2Null()
            Me(Me.tableCustmerInterfaceBox.AddressLine2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.AddressLine3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine3Null()
            Me(Me.tableCustmerInterfaceBox.AddressLine3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPersonNull()
            Me(Me.tableCustmerInterfaceBox.ContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberOfChanelsNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.NumberOfChanelsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberOfChanelsNull()
            Me(Me.tableCustmerInterfaceBox.NumberOfChanelsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChanelFormatNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ChanelFormatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChanelFormatNull()
            Me(Me.tableCustmerInterfaceBox.ChanelFormatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChanelPrefixNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ChanelPrefixColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChanelPrefixNull()
            Me(Me.tableCustmerInterfaceBox.ChanelPrefixColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChanelNumberNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ChanelNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChanelNumberNull()
            Me(Me.tableCustmerInterfaceBox.ChanelNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChanelValueNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ChanelValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChanelValueNull()
            Me(Me.tableCustmerInterfaceBox.ChanelValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChanelSuffixNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.ChanelSuffixColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChanelSuffixNull()
            Me(Me.tableCustmerInterfaceBox.ChanelSuffixColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSizeNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.SampleSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSizeNull()
            Me(Me.tableCustmerInterfaceBox.SampleSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.SampleFrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequencyNull()
            Me(Me.tableCustmerInterfaceBox.SampleFrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroupsNull() As Boolean
            Return Me.IsNull(Me.tableCustmerInterfaceBox.NumberofSubGroupsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroupsNull()
            Me(Me.tableCustmerInterfaceBox.NumberofSubGroupsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustomerOctaGageRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomerOctaGage As CustomerOctaGageDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerOctaGage = CType(Me.Table,CustomerOctaGageDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartID() As Integer
            Get
                Return CType(Me(Me.tableCustomerOctaGage.PartIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerOctaGage.PartIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.PartNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartName' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.PartNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organisation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.OrganisationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organisation' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.OrganisationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.AddressLine1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.AddressLine1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.AddressLine2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.AddressLine2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.AddressLine3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.AddressLine3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property operatorname() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.operatornameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'operatorname' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.operatornameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberOfResults() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberOfResultsColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberOfResults' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberOfResultsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups1' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL2() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL2Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups2' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL3() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL3Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize3Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency3Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups3() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups3Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups3' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName4() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL4() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL4Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize4Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency4Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups4() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups4Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups4' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName5() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL5() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL5Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize5Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency5Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups5() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups5Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups5' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName6() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL6() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL6Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize6Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency6Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups6() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups6Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups6' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName7() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL7() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL7Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize7Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency7Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups7() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups7Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups7' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName8() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.ParameterName8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.ParameterName8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.USL8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.USL8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.UCL8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.UCL8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NOM8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NOM8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LCL8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LCL8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL8() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.LSL8Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.LSL8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize8() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleSize8Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleSize8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency8() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.SampleFrequency8Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.SampleFrequency8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups8() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.NumberofSubGroups8Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups8' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.NumberofSubGroups8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uslcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.uslcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'uslcolor' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.uslcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uclcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.uclcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'uclcolor' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.uclcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nvcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.nvcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nvcolor' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.nvcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lclcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.lclcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lclcolor' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.lclcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lslcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.lslcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lslcolor' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.lslcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property machinenum() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.machinenumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'machinenum' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.machinenumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numberofparameters() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustomerOctaGage.numberofparametersColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'numberofparameters' in table 'CustomerOctaGage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerOctaGage.numberofparametersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.PartNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartNameNull()
            Me(Me.tableCustomerOctaGage.PartNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganisationNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.OrganisationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganisationNull()
            Me(Me.tableCustomerOctaGage.OrganisationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.AddressLine1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine1Null()
            Me(Me.tableCustomerOctaGage.AddressLine1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.AddressLine2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine2Null()
            Me(Me.tableCustomerOctaGage.AddressLine2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.AddressLine3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine3Null()
            Me(Me.tableCustomerOctaGage.AddressLine3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoperatornameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.operatornameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoperatornameNull()
            Me(Me.tableCustomerOctaGage.operatornameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberOfResultsNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberOfResultsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberOfResultsNull()
            Me(Me.tableCustomerOctaGage.NumberOfResultsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName1Null()
            Me(Me.tableCustomerOctaGage.ParameterName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL1Null()
            Me(Me.tableCustomerOctaGage.USL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL1Null()
            Me(Me.tableCustomerOctaGage.UCL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM1Null()
            Me(Me.tableCustomerOctaGage.NOM1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL1Null()
            Me(Me.tableCustomerOctaGage.LCL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL1Null()
            Me(Me.tableCustomerOctaGage.LSL1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize1Null()
            Me(Me.tableCustomerOctaGage.SampleSize1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency1Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups1Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName2Null()
            Me(Me.tableCustomerOctaGage.ParameterName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL2Null()
            Me(Me.tableCustomerOctaGage.USL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL2Null()
            Me(Me.tableCustomerOctaGage.UCL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM2Null()
            Me(Me.tableCustomerOctaGage.NOM2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL2Null()
            Me(Me.tableCustomerOctaGage.LCL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL2Null()
            Me(Me.tableCustomerOctaGage.LSL2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize2Null()
            Me(Me.tableCustomerOctaGage.SampleSize2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency2Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups2Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName3Null()
            Me(Me.tableCustomerOctaGage.ParameterName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL3Null()
            Me(Me.tableCustomerOctaGage.USL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL3Null()
            Me(Me.tableCustomerOctaGage.UCL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM3Null()
            Me(Me.tableCustomerOctaGage.NOM3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL3Null()
            Me(Me.tableCustomerOctaGage.LCL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL3Null()
            Me(Me.tableCustomerOctaGage.LSL3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize3Null()
            Me(Me.tableCustomerOctaGage.SampleSize3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency3Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups3Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName4Null()
            Me(Me.tableCustomerOctaGage.ParameterName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL4Null()
            Me(Me.tableCustomerOctaGage.USL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL4Null()
            Me(Me.tableCustomerOctaGage.UCL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM4Null()
            Me(Me.tableCustomerOctaGage.NOM4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL4Null()
            Me(Me.tableCustomerOctaGage.LCL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL4Null()
            Me(Me.tableCustomerOctaGage.LSL4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize4Null()
            Me(Me.tableCustomerOctaGage.SampleSize4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency4Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups4Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups4Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName5Null()
            Me(Me.tableCustomerOctaGage.ParameterName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL5Null()
            Me(Me.tableCustomerOctaGage.USL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL5Null()
            Me(Me.tableCustomerOctaGage.UCL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM5Null()
            Me(Me.tableCustomerOctaGage.NOM5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL5Null()
            Me(Me.tableCustomerOctaGage.LCL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL5Null()
            Me(Me.tableCustomerOctaGage.LSL5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize5Null()
            Me(Me.tableCustomerOctaGage.SampleSize5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency5Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups5Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups5Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName6Null()
            Me(Me.tableCustomerOctaGage.ParameterName6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL6Null()
            Me(Me.tableCustomerOctaGage.USL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL6Null()
            Me(Me.tableCustomerOctaGage.UCL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM6Null()
            Me(Me.tableCustomerOctaGage.NOM6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL6Null()
            Me(Me.tableCustomerOctaGage.LCL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL6Null()
            Me(Me.tableCustomerOctaGage.LSL6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize6Null()
            Me(Me.tableCustomerOctaGage.SampleSize6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency6Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups6Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups6Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName7Null()
            Me(Me.tableCustomerOctaGage.ParameterName7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL7Null()
            Me(Me.tableCustomerOctaGage.USL7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL7Null()
            Me(Me.tableCustomerOctaGage.UCL7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM7Null()
            Me(Me.tableCustomerOctaGage.NOM7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL7Null()
            Me(Me.tableCustomerOctaGage.LCL7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL7Null()
            Me(Me.tableCustomerOctaGage.LSL7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize7Null()
            Me(Me.tableCustomerOctaGage.SampleSize7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency7Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups7Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups7Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterName8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.ParameterName8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterName8Null()
            Me(Me.tableCustomerOctaGage.ParameterName8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSL8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.USL8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSL8Null()
            Me(Me.tableCustomerOctaGage.USL8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCL8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.UCL8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCL8Null()
            Me(Me.tableCustomerOctaGage.UCL8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOM8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NOM8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOM8Null()
            Me(Me.tableCustomerOctaGage.NOM8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCL8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LCL8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCL8Null()
            Me(Me.tableCustomerOctaGage.LCL8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSL8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.LSL8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSL8Null()
            Me(Me.tableCustomerOctaGage.LSL8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSize8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleSize8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSize8Null()
            Me(Me.tableCustomerOctaGage.SampleSize8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequency8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.SampleFrequency8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequency8Null()
            Me(Me.tableCustomerOctaGage.SampleFrequency8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroups8Null() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.NumberofSubGroups8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroups8Null()
            Me(Me.tableCustomerOctaGage.NumberofSubGroups8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuslcolorNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.uslcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuslcolorNull()
            Me(Me.tableCustomerOctaGage.uslcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuclcolorNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.uclcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuclcolorNull()
            Me(Me.tableCustomerOctaGage.uclcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnvcolorNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.nvcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnvcolorNull()
            Me(Me.tableCustomerOctaGage.nvcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslclcolorNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.lclcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlclcolorNull()
            Me(Me.tableCustomerOctaGage.lclcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslslcolorNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.lslcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlslcolorNull()
            Me(Me.tableCustomerOctaGage.lslcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmachinenumNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.machinenumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmachinenumNull()
            Me(Me.tableCustomerOctaGage.machinenumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumberofparametersNull() As Boolean
            Return Me.IsNull(Me.tableCustomerOctaGage.numberofparametersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumberofparametersNull()
            Me(Me.tableCustomerOctaGage.numberofparametersColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustomerTriColorColumnRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomerTriColorColumn As CustomerTriColorColumnDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerTriColorColumn = CType(Me.Table,CustomerTriColorColumnDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customerId() As Integer
            Get
                Return CType(Me(Me.tableCustomerTriColorColumn.customerIdColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.customerIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organisation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.OrganisationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organisation' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.OrganisationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine1() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.AddressLine1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine1' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.AddressLine1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.AddressLine2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine2' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.AddressLine2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressLine3() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.AddressLine3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddressLine3' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.AddressLine3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPerson() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.ContactPersonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPerson' in table 'CustomerTriColorColumn' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.ContactPersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParameterName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.ParameterNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParameterName' in table 'CustomerTriColorColumn' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.ParameterNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.USLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USL' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.USLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UCL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.UCLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UCL' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.UCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NOM() As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.NOMColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOM' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.NOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.LCLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.LCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LSL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.LSLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LSL' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.LSLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleSize() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.SampleSizeColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleSize' in table 'CustomerTriColorColumn' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.SampleSizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleFrequency() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.SampleFrequencyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SampleFrequency' in table 'CustomerTriColorColumn' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.SampleFrequencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberofSubGroups() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomerTriColorColumn.NumberofSubGroupsColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberofSubGroups' in table 'CustomerTriColorColumn' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerTriColorColumn.NumberofSubGroupsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganisationNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.OrganisationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganisationNull()
            Me(Me.tableCustomerTriColorColumn.OrganisationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine1Null() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.AddressLine1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine1Null()
            Me(Me.tableCustomerTriColorColumn.AddressLine1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.AddressLine2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine2Null()
            Me(Me.tableCustomerTriColorColumn.AddressLine2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.AddressLine3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddressLine3Null()
            Me(Me.tableCustomerTriColorColumn.AddressLine3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPersonNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.ContactPersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPersonNull()
            Me(Me.tableCustomerTriColorColumn.ContactPersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParameterNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.ParameterNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParameterNameNull()
            Me(Me.tableCustomerTriColorColumn.ParameterNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSLNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.USLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSLNull()
            Me(Me.tableCustomerTriColorColumn.USLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUCLNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.UCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUCLNull()
            Me(Me.tableCustomerTriColorColumn.UCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNOMNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.NOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNOMNull()
            Me(Me.tableCustomerTriColorColumn.NOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCLNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.LCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCLNull()
            Me(Me.tableCustomerTriColorColumn.LCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLSLNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.LSLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLSLNull()
            Me(Me.tableCustomerTriColorColumn.LSLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleSizeNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.SampleSizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleSizeNull()
            Me(Me.tableCustomerTriColorColumn.SampleSizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleFrequencyNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.SampleFrequencyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleFrequencyNull()
            Me(Me.tableCustomerTriColorColumn.SampleFrequencyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberofSubGroupsNull() As Boolean
            Return Me.IsNull(Me.tableCustomerTriColorColumn.NumberofSubGroupsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberofSubGroupsNull()
            Me(Me.tableCustomerTriColorColumn.NumberofSubGroupsColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LoginRow
        Inherits Global.System.Data.DataRow
        
        Private tableLogin As LoginDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLogin = CType(Me.Table,LoginDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property user_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableLogin.user_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'user_name' in table 'Login' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLogin.user_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pass() As String
            Get
                Try 
                    Return CType(Me(Me.tableLogin.passColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pass' in table 'Login' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLogin.passColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isuser_nameNull() As Boolean
            Return Me.IsNull(Me.tableLogin.user_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setuser_nameNull()
            Me(Me.tableLogin.user_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspassNull() As Boolean
            Return Me.IsNull(Me.tableLogin.passColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpassNull()
            Me(Me.tableLogin.passColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class partdetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tablepartdetails As partdetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartdetails = CType(Me.Table,partdetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property partId() As Integer
            Get
                Return CType(Me(Me.tablepartdetails.partIdColumn),Integer)
            End Get
            Set
                Me(Me.tablepartdetails.partIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property partname() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.partnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'partname' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.partnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property customername() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.customernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'customername' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.customernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usl() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.uslColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'usl' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.uslColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ucl() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.uclColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ucl' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.uclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nv() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.nvColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nv' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.nvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lcl() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.lclColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lcl' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.lclColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lsl() As Double
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.lslColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lsl' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.lslColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uslcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.uslcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'uslcolor' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.uslcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uclcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.uclcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'uclcolor' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.uclcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nvcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.nvcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nvcolor' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.nvcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lclcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.lclcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lclcolor' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.lclcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lslcolor() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.lslcolorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lslcolor' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.lslcolorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property paramname() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.paramnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'paramname' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.paramnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property operatorname() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.operatornameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'operatorname' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.operatornameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property machinenum() As String
            Get
                Try 
                    Return CType(Me(Me.tablepartdetails.machinenumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'machinenum' in table 'partdetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartdetails.machinenumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspartnameNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.partnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpartnameNull()
            Me(Me.tablepartdetails.partnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscustomernameNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.customernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcustomernameNull()
            Me(Me.tablepartdetails.customernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuslNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.uslColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuslNull()
            Me(Me.tablepartdetails.uslColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuclNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.uclColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuclNull()
            Me(Me.tablepartdetails.uclColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnvNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.nvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnvNull()
            Me(Me.tablepartdetails.nvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslclNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.lclColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlclNull()
            Me(Me.tablepartdetails.lclColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslslNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.lslColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlslNull()
            Me(Me.tablepartdetails.lslColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuslcolorNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.uslcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuslcolorNull()
            Me(Me.tablepartdetails.uslcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsuclcolorNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.uclcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetuclcolorNull()
            Me(Me.tablepartdetails.uclcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnvcolorNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.nvcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnvcolorNull()
            Me(Me.tablepartdetails.nvcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslclcolorNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.lclcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlclcolorNull()
            Me(Me.tablepartdetails.lclcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslslcolorNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.lslcolorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlslcolorNull()
            Me(Me.tablepartdetails.lslcolorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsparamnameNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.paramnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetparamnameNull()
            Me(Me.tablepartdetails.paramnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsoperatornameNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.operatornameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetoperatornameNull()
            Me(Me.tablepartdetails.operatornameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmachinenumNull() As Boolean
            Return Me.IsNull(Me.tablepartdetails.machinenumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmachinenumNull()
            Me(Me.tablepartdetails.machinenumColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CommunicationPortRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CommunicationPortRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CommunicationPortRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CommunicationPortRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustmerInterfaceBoxRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustmerInterfaceBoxRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustmerInterfaceBoxRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustmerInterfaceBoxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustomerOctaGageRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomerOctaGageRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustomerOctaGageRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustomerOctaGageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustomerTriColorColumnRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomerTriColorColumnRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustomerTriColorColumnRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustomerTriColorColumnRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LoginRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LoginRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LoginRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LoginRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class partdetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As partdetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As partdetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As partdetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace VersaGageMonitorDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CommunicationPortTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CommunicationPort"
            tableMapping.ColumnMappings.Add("Port", "Port")
            tableMapping.ColumnMappings.Add("Baud_Rate", "Baud_Rate")
            tableMapping.ColumnMappings.Add("Data_Bits", "Data_Bits")
            tableMapping.ColumnMappings.Add("Parity", "Parity")
            tableMapping.ColumnMappings.Add("Stop_Bit", "Stop_Bit")
            tableMapping.ColumnMappings.Add("Flow_Control", "Flow_Control")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `CommunicationPort` (`Port`, `Baud_Rate`, `Data_Bits`, `Parity`, `Sto"& _ 
                "p_Bit`, `Flow_Control`) VALUES (?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Port", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Port", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Baud_Rate", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Baud_Rate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Data_Bits", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Data_Bits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Parity", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Parity", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Stop_Bit", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Stop_Bit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Flow_Control", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flow_Control", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Port, Baud_Rate, Data_Bits, Parity, Stop_Bit, Flow_Control FROM Communicat"& _ 
                "ionPort"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE    CommunicationPort"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              Port = ?, Baud_Rate = ?, Data_Bits "& _ 
                "= ?, Parity = ?, Stop_Bit = ?, Flow_Control = ?"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Port", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Port", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Baud_Rate", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Baud_Rate", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Data_Bits", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Data_Bits", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Parity", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Parity", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Stop_Bit", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Stop_Bit", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Flow_Control", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Flow_Control", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.CommunicationPortDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.CommunicationPortDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.CommunicationPortDataTable = New VersaGageMonitorDataSet.CommunicationPortDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.CommunicationPortDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CommunicationPort")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Port As String, ByVal Baud_Rate As String, ByVal Data_Bits As String, ByVal Parity As String, ByVal Stop_Bit As String, ByVal Flow_Control As String) As Integer
            If (Port Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Port,String)
            End If
            If (Baud_Rate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Baud_Rate,String)
            End If
            If (Data_Bits Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Data_Bits,String)
            End If
            If (Parity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Parity,String)
            End If
            If (Stop_Bit Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Stop_Bit,String)
            End If
            If (Flow_Control Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Flow_Control,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateQuery(ByVal Port As String, ByVal Baud_Rate As String, ByVal Data_Bits As String, ByVal Parity As String, ByVal Stop_Bit As String, ByVal Flow_Control As String) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(1)
            If (Port Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Port,String)
            End If
            If (Baud_Rate Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(Baud_Rate,String)
            End If
            If (Data_Bits Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(Data_Bits,String)
            End If
            If (Parity Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(Parity,String)
            End If
            If (Stop_Bit Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(Stop_Bit,String)
            End If
            If (Flow_Control Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(Flow_Control,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustmerInterfaceBoxTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustmerInterfaceBox"
            tableMapping.ColumnMappings.Add("Organisation", "Organisation")
            tableMapping.ColumnMappings.Add("AddressLine1", "AddressLine1")
            tableMapping.ColumnMappings.Add("AddressLine2", "AddressLine2")
            tableMapping.ColumnMappings.Add("AddressLine3", "AddressLine3")
            tableMapping.ColumnMappings.Add("ContactPerson", "ContactPerson")
            tableMapping.ColumnMappings.Add("NumberOfChanels", "NumberOfChanels")
            tableMapping.ColumnMappings.Add("ChanelFormat", "ChanelFormat")
            tableMapping.ColumnMappings.Add("ChanelPrefix", "ChanelPrefix")
            tableMapping.ColumnMappings.Add("ChanelNumber", "ChanelNumber")
            tableMapping.ColumnMappings.Add("ChanelValue", "ChanelValue")
            tableMapping.ColumnMappings.Add("ChanelSuffix", "ChanelSuffix")
            tableMapping.ColumnMappings.Add("SampleSize", "SampleSize")
            tableMapping.ColumnMappings.Add("SampleFrequency", "SampleFrequency")
            tableMapping.ColumnMappings.Add("NumberofSubGroups", "NumberofSubGroups")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `CustmerInterfaceBox` (`Organisation`, `AddressLine1`, `AddressLine2`"& _ 
                ", `AddressLine3`, `ContactPerson`, `NumberOfChanels`, `ChanelFormat`, `ChanelPre"& _ 
                "fix`, `ChanelNumber`, `ChanelValue`, `ChanelSuffix`, `SampleSize`, `SampleFreque"& _ 
                "ncy`, `NumberofSubGroups`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactPerson", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberOfChanels", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfChanels", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ChanelFormat", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChanelFormat", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ChanelPrefix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChanelPrefix", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ChanelNumber", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChanelNumber", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ChanelValue", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChanelValue", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ChanelSuffix", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ChanelSuffix", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Organisation, AddressLine1, AddressLine2, AddressLine3, ContactPerson, Num"& _ 
                "berOfChanels, ChanelFormat, ChanelPrefix, ChanelNumber, ChanelValue, ChanelSuffi"& _ 
                "x, SampleSize, SampleFrequency, NumberofSubGroups FROM CustmerInterfaceBox"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.CustmerInterfaceBoxDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.CustmerInterfaceBoxDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.CustmerInterfaceBoxDataTable = New VersaGageMonitorDataSet.CustmerInterfaceBoxDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.CustmerInterfaceBoxDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustmerInterfaceBox")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Organisation As String, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal ContactPerson As String, ByVal NumberOfChanels As Global.System.Nullable(Of Short), ByVal ChanelFormat As String, ByVal ChanelPrefix As String, ByVal ChanelNumber As String, ByVal ChanelValue As String, ByVal ChanelSuffix As String, ByVal SampleSize As Global.System.Nullable(Of Short), ByVal SampleFrequency As Global.System.Nullable(Of Short), ByVal NumberofSubGroups As Global.System.Nullable(Of Short)) As Integer
            If (Organisation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AddressLine1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AddressLine3,String)
            End If
            If (ContactPerson Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ContactPerson,String)
            End If
            If (NumberOfChanels.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(NumberOfChanels.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ChanelFormat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ChanelFormat,String)
            End If
            If (ChanelPrefix Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ChanelPrefix,String)
            End If
            If (ChanelNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ChanelNumber,String)
            End If
            If (ChanelValue Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ChanelValue,String)
            End If
            If (ChanelSuffix Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ChanelSuffix,String)
            End If
            If (SampleSize.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SampleSize.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SampleFrequency.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NumberofSubGroups.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerOctaGageTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomerOctaGage"
            tableMapping.ColumnMappings.Add("PartID", "PartID")
            tableMapping.ColumnMappings.Add("PartName", "PartName")
            tableMapping.ColumnMappings.Add("Organisation", "Organisation")
            tableMapping.ColumnMappings.Add("AddressLine1", "AddressLine1")
            tableMapping.ColumnMappings.Add("AddressLine2", "AddressLine2")
            tableMapping.ColumnMappings.Add("AddressLine3", "AddressLine3")
            tableMapping.ColumnMappings.Add("operatorname", "operatorname")
            tableMapping.ColumnMappings.Add("NumberOfResults", "NumberOfResults")
            tableMapping.ColumnMappings.Add("ParameterName1", "ParameterName1")
            tableMapping.ColumnMappings.Add("USL1", "USL1")
            tableMapping.ColumnMappings.Add("UCL1", "UCL1")
            tableMapping.ColumnMappings.Add("NOM1", "NOM1")
            tableMapping.ColumnMappings.Add("LCL1", "LCL1")
            tableMapping.ColumnMappings.Add("LSL1", "LSL1")
            tableMapping.ColumnMappings.Add("SampleSize1", "SampleSize1")
            tableMapping.ColumnMappings.Add("SampleFrequency1", "SampleFrequency1")
            tableMapping.ColumnMappings.Add("NumberofSubGroups1", "NumberofSubGroups1")
            tableMapping.ColumnMappings.Add("ParameterName2", "ParameterName2")
            tableMapping.ColumnMappings.Add("USL2", "USL2")
            tableMapping.ColumnMappings.Add("UCL2", "UCL2")
            tableMapping.ColumnMappings.Add("NOM2", "NOM2")
            tableMapping.ColumnMappings.Add("LCL2", "LCL2")
            tableMapping.ColumnMappings.Add("LSL2", "LSL2")
            tableMapping.ColumnMappings.Add("SampleSize2", "SampleSize2")
            tableMapping.ColumnMappings.Add("SampleFrequency2", "SampleFrequency2")
            tableMapping.ColumnMappings.Add("NumberofSubGroups2", "NumberofSubGroups2")
            tableMapping.ColumnMappings.Add("ParameterName3", "ParameterName3")
            tableMapping.ColumnMappings.Add("USL3", "USL3")
            tableMapping.ColumnMappings.Add("UCL3", "UCL3")
            tableMapping.ColumnMappings.Add("NOM3", "NOM3")
            tableMapping.ColumnMappings.Add("LCL3", "LCL3")
            tableMapping.ColumnMappings.Add("LSL3", "LSL3")
            tableMapping.ColumnMappings.Add("SampleSize3", "SampleSize3")
            tableMapping.ColumnMappings.Add("SampleFrequency3", "SampleFrequency3")
            tableMapping.ColumnMappings.Add("NumberofSubGroups3", "NumberofSubGroups3")
            tableMapping.ColumnMappings.Add("ParameterName4", "ParameterName4")
            tableMapping.ColumnMappings.Add("USL4", "USL4")
            tableMapping.ColumnMappings.Add("UCL4", "UCL4")
            tableMapping.ColumnMappings.Add("NOM4", "NOM4")
            tableMapping.ColumnMappings.Add("LCL4", "LCL4")
            tableMapping.ColumnMappings.Add("LSL4", "LSL4")
            tableMapping.ColumnMappings.Add("SampleSize4", "SampleSize4")
            tableMapping.ColumnMappings.Add("SampleFrequency4", "SampleFrequency4")
            tableMapping.ColumnMappings.Add("NumberofSubGroups4", "NumberofSubGroups4")
            tableMapping.ColumnMappings.Add("ParameterName5", "ParameterName5")
            tableMapping.ColumnMappings.Add("USL5", "USL5")
            tableMapping.ColumnMappings.Add("UCL5", "UCL5")
            tableMapping.ColumnMappings.Add("NOM5", "NOM5")
            tableMapping.ColumnMappings.Add("LCL5", "LCL5")
            tableMapping.ColumnMappings.Add("LSL5", "LSL5")
            tableMapping.ColumnMappings.Add("SampleSize5", "SampleSize5")
            tableMapping.ColumnMappings.Add("SampleFrequency5", "SampleFrequency5")
            tableMapping.ColumnMappings.Add("NumberofSubGroups5", "NumberofSubGroups5")
            tableMapping.ColumnMappings.Add("ParameterName6", "ParameterName6")
            tableMapping.ColumnMappings.Add("USL6", "USL6")
            tableMapping.ColumnMappings.Add("UCL6", "UCL6")
            tableMapping.ColumnMappings.Add("NOM6", "NOM6")
            tableMapping.ColumnMappings.Add("LCL6", "LCL6")
            tableMapping.ColumnMappings.Add("LSL6", "LSL6")
            tableMapping.ColumnMappings.Add("SampleSize6", "SampleSize6")
            tableMapping.ColumnMappings.Add("SampleFrequency6", "SampleFrequency6")
            tableMapping.ColumnMappings.Add("NumberofSubGroups6", "NumberofSubGroups6")
            tableMapping.ColumnMappings.Add("ParameterName7", "ParameterName7")
            tableMapping.ColumnMappings.Add("USL7", "USL7")
            tableMapping.ColumnMappings.Add("UCL7", "UCL7")
            tableMapping.ColumnMappings.Add("NOM7", "NOM7")
            tableMapping.ColumnMappings.Add("LCL7", "LCL7")
            tableMapping.ColumnMappings.Add("LSL7", "LSL7")
            tableMapping.ColumnMappings.Add("SampleSize7", "SampleSize7")
            tableMapping.ColumnMappings.Add("SampleFrequency7", "SampleFrequency7")
            tableMapping.ColumnMappings.Add("NumberofSubGroups7", "NumberofSubGroups7")
            tableMapping.ColumnMappings.Add("ParameterName8", "ParameterName8")
            tableMapping.ColumnMappings.Add("USL8", "USL8")
            tableMapping.ColumnMappings.Add("UCL8", "UCL8")
            tableMapping.ColumnMappings.Add("NOM8", "NOM8")
            tableMapping.ColumnMappings.Add("LCL8", "LCL8")
            tableMapping.ColumnMappings.Add("LSL8", "LSL8")
            tableMapping.ColumnMappings.Add("SampleSize8", "SampleSize8")
            tableMapping.ColumnMappings.Add("SampleFrequency8", "SampleFrequency8")
            tableMapping.ColumnMappings.Add("NumberofSubGroups8", "NumberofSubGroups8")
            tableMapping.ColumnMappings.Add("uslcolor", "uslcolor")
            tableMapping.ColumnMappings.Add("uclcolor", "uclcolor")
            tableMapping.ColumnMappings.Add("nvcolor", "nvcolor")
            tableMapping.ColumnMappings.Add("lclcolor", "lclcolor")
            tableMapping.ColumnMappings.Add("lslcolor", "lslcolor")
            tableMapping.ColumnMappings.Add("machinenum", "machinenum")
            tableMapping.ColumnMappings.Add("numberofparameters", "numberofparameters")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `CustomerOctaGage` WHERE ((`PartID` = ?) AND ((? = 1 AND `PartName` I"& _ 
                "S NULL) OR (`PartName` = ?)) AND ((? = 1 AND `Organisation` IS NULL) OR (`Organi"& _ 
                "sation` = ?)) AND ((? = 1 AND `AddressLine1` IS NULL) OR (`AddressLine1` = ?)) A"& _ 
                "ND ((? = 1 AND `AddressLine2` IS NULL) OR (`AddressLine2` = ?)) AND ((? = 1 AND "& _ 
                "`AddressLine3` IS NULL) OR (`AddressLine3` = ?)) AND ((? = 1 AND `operatorname` "& _ 
                "IS NULL) OR (`operatorname` = ?)) AND ((? = 1 AND `NumberOfResults` IS NULL) OR "& _ 
                "(`NumberOfResults` = ?)) AND ((? = 1 AND `ParameterName1` IS NULL) OR (`Paramete"& _ 
                "rName1` = ?)) AND ((? = 1 AND `USL1` IS NULL) OR (`USL1` = ?)) AND ((? = 1 AND `"& _ 
                "UCL1` IS NULL) OR (`UCL1` = ?)) AND ((? = 1 AND `NOM1` IS NULL) OR (`NOM1` = ?))"& _ 
                " AND ((? = 1 AND `LCL1` IS NULL) OR (`LCL1` = ?)) AND ((? = 1 AND `LSL1` IS NULL"& _ 
                ") OR (`LSL1` = ?)) AND ((? = 1 AND `SampleSize1` IS NULL) OR (`SampleSize1` = ?)"& _ 
                ") AND ((? = 1 AND `SampleFrequency1` IS NULL) OR (`SampleFrequency1` = ?)) AND ("& _ 
                "(? = 1 AND `NumberofSubGroups1` IS NULL) OR (`NumberofSubGroups1` = ?)) AND ((? "& _ 
                "= 1 AND `ParameterName2` IS NULL) OR (`ParameterName2` = ?)) AND ((? = 1 AND `US"& _ 
                "L2` IS NULL) OR (`USL2` = ?)) AND ((? = 1 AND `UCL2` IS NULL) OR (`UCL2` = ?)) A"& _ 
                "ND ((? = 1 AND `NOM2` IS NULL) OR (`NOM2` = ?)) AND ((? = 1 AND `LCL2` IS NULL) "& _ 
                "OR (`LCL2` = ?)) AND ((? = 1 AND `LSL2` IS NULL) OR (`LSL2` = ?)) AND ((? = 1 AN"& _ 
                "D `SampleSize2` IS NULL) OR (`SampleSize2` = ?)) AND ((? = 1 AND `SampleFrequenc"& _ 
                "y2` IS NULL) OR (`SampleFrequency2` = ?)) AND ((? = 1 AND `NumberofSubGroups2` I"& _ 
                "S NULL) OR (`NumberofSubGroups2` = ?)) AND ((? = 1 AND `ParameterName3` IS NULL)"& _ 
                " OR (`ParameterName3` = ?)) AND ((? = 1 AND `USL3` IS NULL) OR (`USL3` = ?)) AND"& _ 
                " ((? = 1 AND `UCL3` IS NULL) OR (`UCL3` = ?)) AND ((? = 1 AND `NOM3` IS NULL) OR"& _ 
                " (`NOM3` = ?)) AND ((? = 1 AND `LCL3` IS NULL) OR (`LCL3` = ?)) AND ((? = 1 AND "& _ 
                "`LSL3` IS NULL) OR (`LSL3` = ?)) AND ((? = 1 AND `SampleSize3` IS NULL) OR (`Sam"& _ 
                "pleSize3` = ?)) AND ((? = 1 AND `SampleFrequency3` IS NULL) OR (`SampleFrequency"& _ 
                "3` = ?)) AND ((? = 1 AND `NumberofSubGroups3` IS NULL) OR (`NumberofSubGroups3` "& _ 
                "= ?)) AND ((? = 1 AND `ParameterName4` IS NULL) OR (`ParameterName4` = ?)) AND ("& _ 
                "(? = 1 AND `USL4` IS NULL) OR (`USL4` = ?)) AND ((? = 1 AND `UCL4` IS NULL) OR ("& _ 
                "`UCL4` = ?)) AND ((? = 1 AND `NOM4` IS NULL) OR (`NOM4` = ?)) AND ((? = 1 AND `L"& _ 
                "CL4` IS NULL) OR (`LCL4` = ?)) AND ((? = 1 AND `LSL4` IS NULL) OR (`LSL4` = ?)) "& _ 
                "AND ((? = 1 AND `SampleSize4` IS NULL) OR (`SampleSize4` = ?)) AND ((? = 1 AND `"& _ 
                "SampleFrequency4` IS NULL) OR (`SampleFrequency4` = ?)) AND ((? = 1 AND `Numbero"& _ 
                "fSubGroups4` IS NULL) OR (`NumberofSubGroups4` = ?)) AND ((? = 1 AND `ParameterN"& _ 
                "ame5` IS NULL) OR (`ParameterName5` = ?)) AND ((? = 1 AND `USL5` IS NULL) OR (`U"& _ 
                "SL5` = ?)) AND ((? = 1 AND `UCL5` IS NULL) OR (`UCL5` = ?)) AND ((? = 1 AND `NOM"& _ 
                "5` IS NULL) OR (`NOM5` = ?)) AND ((? = 1 AND `LCL5` IS NULL) OR (`LCL5` = ?)) AN"& _ 
                "D ((? = 1 AND `LSL5` IS NULL) OR (`LSL5` = ?)) AND ((? = 1 AND `SampleSize5` IS "& _ 
                "NULL) OR (`SampleSize5` = ?)) AND ((? = 1 AND `SampleFrequency5` IS NULL) OR (`S"& _ 
                "ampleFrequency5` = ?)) AND ((? = 1 AND `NumberofSubGroups5` IS NULL) OR (`Number"& _ 
                "ofSubGroups5` = ?)) AND ((? = 1 AND `ParameterName6` IS NULL) OR (`ParameterName"& _ 
                "6` = ?)) AND ((? = 1 AND `USL6` IS NULL) OR (`USL6` = ?)) AND ((? = 1 AND `UCL6`"& _ 
                " IS NULL) OR (`UCL6` = ?)) AND ((? = 1 AND `NOM6` IS NULL) OR (`NOM6` = ?)) AND "& _ 
                "((? = 1 AND `LCL6` IS NULL) OR (`LCL6` = ?)) AND ((? = 1 AND `LSL6` IS NULL) OR "& _ 
                "(`LSL6` = ?)) AND ((? = 1 AND `SampleSize6` IS NULL) OR (`SampleSize6` = ?)) AND"& _ 
                " ((? = 1 AND `SampleFrequency6` IS NULL) OR (`SampleFrequency6` = ?)) AND ((? = "& _ 
                "1 AND `NumberofSubGroups6` IS NULL) OR (`NumberofSubGroups6` = ?)) AND ((? = 1 A"& _ 
                "ND `ParameterName7` IS NULL) OR (`ParameterName7` = ?)) AND ((? = 1 AND `USL7` I"& _ 
                "S NULL) OR (`USL7` = ?)) AND ((? = 1 AND `UCL7` IS NULL) OR (`UCL7` = ?)) AND (("& _ 
                "? = 1 AND `NOM7` IS NULL) OR (`NOM7` = ?)) AND ((? = 1 AND `LCL7` IS NULL) OR (`"& _ 
                "LCL7` = ?)) AND ((? = 1 AND `LSL7` IS NULL) OR (`LSL7` = ?)) AND ((? = 1 AND `Sa"& _ 
                "mpleSize7` IS NULL) OR (`SampleSize7` = ?)) AND ((? = 1 AND `SampleFrequency7` I"& _ 
                "S NULL) OR (`SampleFrequency7` = ?)) AND ((? = 1 AND `NumberofSubGroups7` IS NUL"& _ 
                "L) OR (`NumberofSubGroups7` = ?)) AND ((? = 1 AND `ParameterName8` IS NULL) OR ("& _ 
                "`ParameterName8` = ?)) AND ((? = 1 AND `USL8` IS NULL) OR (`USL8` = ?)) AND ((? "& _ 
                "= 1 AND `UCL8` IS NULL) OR (`UCL8` = ?)) AND ((? = 1 AND `NOM8` IS NULL) OR (`NO"& _ 
                "M8` = ?)) AND ((? = 1 AND `LCL8` IS NULL) OR (`LCL8` = ?)) AND ((? = 1 AND `LSL8"& _ 
                "` IS NULL) OR (`LSL8` = ?)) AND ((? = 1 AND `SampleSize8` IS NULL) OR (`SampleSi"& _ 
                "ze8` = ?)) AND ((? = 1 AND `SampleFrequency8` IS NULL) OR (`SampleFrequency8` = "& _ 
                "?)) AND ((? = 1 AND `NumberofSubGroups8` IS NULL) OR (`NumberofSubGroups8` = ?))"& _ 
                " AND ((? = 1 AND `uslcolor` IS NULL) OR (`uslcolor` = ?)) AND ((? = 1 AND `uclco"& _ 
                "lor` IS NULL) OR (`uclcolor` = ?)) AND ((? = 1 AND `nvcolor` IS NULL) OR (`nvcol"& _ 
                "or` = ?)) AND ((? = 1 AND `lclcolor` IS NULL) OR (`lclcolor` = ?)) AND ((? = 1 A"& _ 
                "ND `lslcolor` IS NULL) OR (`lslcolor` = ?)) AND ((? = 1 AND `machinenum` IS NULL"& _ 
                ") OR (`machinenum` = ?)) AND ((? = 1 AND `numberofparameters` IS NULL) OR (`numb"& _ 
                "erofparameters` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PartID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PartName", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PartName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Organisation", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_operatorname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberOfResults", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberOfResults", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName5", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName6", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName7", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName8", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nvcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_machinenum", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `CustomerOctaGage` (`PartName`, `Organisation`, `AddressLine1`, `Addr"& _ 
                "essLine2`, `AddressLine3`, `operatorname`, `NumberOfResults`, `ParameterName1`, "& _ 
                "`USL1`, `UCL1`, `NOM1`, `LCL1`, `LSL1`, `SampleSize1`, `SampleFrequency1`, `Numb"& _ 
                "erofSubGroups1`, `ParameterName2`, `USL2`, `UCL2`, `NOM2`, `LCL2`, `LSL2`, `Samp"& _ 
                "leSize2`, `SampleFrequency2`, `NumberofSubGroups2`, `ParameterName3`, `USL3`, `U"& _ 
                "CL3`, `NOM3`, `LCL3`, `LSL3`, `SampleSize3`, `SampleFrequency3`, `NumberofSubGro"& _ 
                "ups3`, `ParameterName4`, `USL4`, `UCL4`, `NOM4`, `LCL4`, `LSL4`, `SampleSize4`, "& _ 
                "`SampleFrequency4`, `NumberofSubGroups4`, `ParameterName5`, `USL5`, `UCL5`, `NOM"& _ 
                "5`, `LCL5`, `LSL5`, `SampleSize5`, `SampleFrequency5`, `NumberofSubGroups5`, `Pa"& _ 
                "rameterName6`, `USL6`, `UCL6`, `NOM6`, `LCL6`, `LSL6`, `SampleSize6`, `SampleFre"& _ 
                "quency6`, `NumberofSubGroups6`, `ParameterName7`, `USL7`, `UCL7`, `NOM7`, `LCL7`"& _ 
                ", `LSL7`, `SampleSize7`, `SampleFrequency7`, `NumberofSubGroups7`, `ParameterNam"& _ 
                "e8`, `USL8`, `UCL8`, `NOM8`, `LCL8`, `LSL8`, `SampleSize8`, `SampleFrequency8`, "& _ 
                "`NumberofSubGroups8`, `uslcolor`, `uclcolor`, `nvcolor`, `lclcolor`, `lslcolor`,"& _ 
                " `machinenum`, `numberofparameters`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberOfResults", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName5", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName6", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName7", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName8", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `CustomerOctaGage` SET `PartName` = ?, `Organisation` = ?, `AddressLine1` "& _ 
                "= ?, `AddressLine2` = ?, `AddressLine3` = ?, `operatorname` = ?, `NumberOfResult"& _ 
                "s` = ?, `ParameterName1` = ?, `USL1` = ?, `UCL1` = ?, `NOM1` = ?, `LCL1` = ?, `L"& _ 
                "SL1` = ?, `SampleSize1` = ?, `SampleFrequency1` = ?, `NumberofSubGroups1` = ?, `"& _ 
                "ParameterName2` = ?, `USL2` = ?, `UCL2` = ?, `NOM2` = ?, `LCL2` = ?, `LSL2` = ?,"& _ 
                " `SampleSize2` = ?, `SampleFrequency2` = ?, `NumberofSubGroups2` = ?, `Parameter"& _ 
                "Name3` = ?, `USL3` = ?, `UCL3` = ?, `NOM3` = ?, `LCL3` = ?, `LSL3` = ?, `SampleS"& _ 
                "ize3` = ?, `SampleFrequency3` = ?, `NumberofSubGroups3` = ?, `ParameterName4` = "& _ 
                "?, `USL4` = ?, `UCL4` = ?, `NOM4` = ?, `LCL4` = ?, `LSL4` = ?, `SampleSize4` = ?"& _ 
                ", `SampleFrequency4` = ?, `NumberofSubGroups4` = ?, `ParameterName5` = ?, `USL5`"& _ 
                " = ?, `UCL5` = ?, `NOM5` = ?, `LCL5` = ?, `LSL5` = ?, `SampleSize5` = ?, `Sample"& _ 
                "Frequency5` = ?, `NumberofSubGroups5` = ?, `ParameterName6` = ?, `USL6` = ?, `UC"& _ 
                "L6` = ?, `NOM6` = ?, `LCL6` = ?, `LSL6` = ?, `SampleSize6` = ?, `SampleFrequency"& _ 
                "6` = ?, `NumberofSubGroups6` = ?, `ParameterName7` = ?, `USL7` = ?, `UCL7` = ?, "& _ 
                "`NOM7` = ?, `LCL7` = ?, `LSL7` = ?, `SampleSize7` = ?, `SampleFrequency7` = ?, `"& _ 
                "NumberofSubGroups7` = ?, `ParameterName8` = ?, `USL8` = ?, `UCL8` = ?, `NOM8` = "& _ 
                "?, `LCL8` = ?, `LSL8` = ?, `SampleSize8` = ?, `SampleFrequency8` = ?, `NumberofS"& _ 
                "ubGroups8` = ?, `uslcolor` = ?, `uclcolor` = ?, `nvcolor` = ?, `lclcolor` = ?, `"& _ 
                "lslcolor` = ?, `machinenum` = ?, `numberofparameters` = ? WHERE ((`PartID` = ?) "& _ 
                "AND ((? = 1 AND `PartName` IS NULL) OR (`PartName` = ?)) AND ((? = 1 AND `Organi"& _ 
                "sation` IS NULL) OR (`Organisation` = ?)) AND ((? = 1 AND `AddressLine1` IS NULL"& _ 
                ") OR (`AddressLine1` = ?)) AND ((? = 1 AND `AddressLine2` IS NULL) OR (`AddressL"& _ 
                "ine2` = ?)) AND ((? = 1 AND `AddressLine3` IS NULL) OR (`AddressLine3` = ?)) AND"& _ 
                " ((? = 1 AND `operatorname` IS NULL) OR (`operatorname` = ?)) AND ((? = 1 AND `N"& _ 
                "umberOfResults` IS NULL) OR (`NumberOfResults` = ?)) AND ((? = 1 AND `ParameterN"& _ 
                "ame1` IS NULL) OR (`ParameterName1` = ?)) AND ((? = 1 AND `USL1` IS NULL) OR (`U"& _ 
                "SL1` = ?)) AND ((? = 1 AND `UCL1` IS NULL) OR (`UCL1` = ?)) AND ((? = 1 AND `NOM"& _ 
                "1` IS NULL) OR (`NOM1` = ?)) AND ((? = 1 AND `LCL1` IS NULL) OR (`LCL1` = ?)) AN"& _ 
                "D ((? = 1 AND `LSL1` IS NULL) OR (`LSL1` = ?)) AND ((? = 1 AND `SampleSize1` IS "& _ 
                "NULL) OR (`SampleSize1` = ?)) AND ((? = 1 AND `SampleFrequency1` IS NULL) OR (`S"& _ 
                "ampleFrequency1` = ?)) AND ((? = 1 AND `NumberofSubGroups1` IS NULL) OR (`Number"& _ 
                "ofSubGroups1` = ?)) AND ((? = 1 AND `ParameterName2` IS NULL) OR (`ParameterName"& _ 
                "2` = ?)) AND ((? = 1 AND `USL2` IS NULL) OR (`USL2` = ?)) AND ((? = 1 AND `UCL2`"& _ 
                " IS NULL) OR (`UCL2` = ?)) AND ((? = 1 AND `NOM2` IS NULL) OR (`NOM2` = ?)) AND "& _ 
                "((? = 1 AND `LCL2` IS NULL) OR (`LCL2` = ?)) AND ((? = 1 AND `LSL2` IS NULL) OR "& _ 
                "(`LSL2` = ?)) AND ((? = 1 AND `SampleSize2` IS NULL) OR (`SampleSize2` = ?)) AND"& _ 
                " ((? = 1 AND `SampleFrequency2` IS NULL) OR (`SampleFrequency2` = ?)) AND ((? = "& _ 
                "1 AND `NumberofSubGroups2` IS NULL) OR (`NumberofSubGroups2` = ?)) AND ((? = 1 A"& _ 
                "ND `ParameterName3` IS NULL) OR (`ParameterName3` = ?)) AND ((? = 1 AND `USL3` I"& _ 
                "S NULL) OR (`USL3` = ?)) AND ((? = 1 AND `UCL3` IS NULL) OR (`UCL3` = ?)) AND (("& _ 
                "? = 1 AND `NOM3` IS NULL) OR (`NOM3` = ?)) AND ((? = 1 AND `LCL3` IS NULL) OR (`"& _ 
                "LCL3` = ?)) AND ((? = 1 AND `LSL3` IS NULL) OR (`LSL3` = ?)) AND ((? = 1 AND `Sa"& _ 
                "mpleSize3` IS NULL) OR (`SampleSize3` = ?)) AND ((? = 1 AND `SampleFrequency3` I"& _ 
                "S NULL) OR (`SampleFrequency3` = ?)) AND ((? = 1 AND `NumberofSubGroups3` IS NUL"& _ 
                "L) OR (`NumberofSubGroups3` = ?)) AND ((? = 1 AND `ParameterName4` IS NULL) OR ("& _ 
                "`ParameterName4` = ?)) AND ((? = 1 AND `USL4` IS NULL) OR (`USL4` = ?)) AND ((? "& _ 
                "= 1 AND `UCL4` IS NULL) OR (`UCL4` = ?)) AND ((? = 1 AND `NOM4` IS NULL) OR (`NO"& _ 
                "M4` = ?)) AND ((? = 1 AND `LCL4` IS NULL) OR (`LCL4` = ?)) AND ((? = 1 AND `LSL4"& _ 
                "` IS NULL) OR (`LSL4` = ?)) AND ((? = 1 AND `SampleSize4` IS NULL) OR (`SampleSi"& _ 
                "ze4` = ?)) AND ((? = 1 AND `SampleFrequency4` IS NULL) OR (`SampleFrequency4` = "& _ 
                "?)) AND ((? = 1 AND `NumberofSubGroups4` IS NULL) OR (`NumberofSubGroups4` = ?))"& _ 
                " AND ((? = 1 AND `ParameterName5` IS NULL) OR (`ParameterName5` = ?)) AND ((? = "& _ 
                "1 AND `USL5` IS NULL) OR (`USL5` = ?)) AND ((? = 1 AND `UCL5` IS NULL) OR (`UCL5"& _ 
                "` = ?)) AND ((? = 1 AND `NOM5` IS NULL) OR (`NOM5` = ?)) AND ((? = 1 AND `LCL5` "& _ 
                "IS NULL) OR (`LCL5` = ?)) AND ((? = 1 AND `LSL5` IS NULL) OR (`LSL5` = ?)) AND ("& _ 
                "(? = 1 AND `SampleSize5` IS NULL) OR (`SampleSize5` = ?)) AND ((? = 1 AND `Sampl"& _ 
                "eFrequency5` IS NULL) OR (`SampleFrequency5` = ?)) AND ((? = 1 AND `NumberofSubG"& _ 
                "roups5` IS NULL) OR (`NumberofSubGroups5` = ?)) AND ((? = 1 AND `ParameterName6`"& _ 
                " IS NULL) OR (`ParameterName6` = ?)) AND ((? = 1 AND `USL6` IS NULL) OR (`USL6` "& _ 
                "= ?)) AND ((? = 1 AND `UCL6` IS NULL) OR (`UCL6` = ?)) AND ((? = 1 AND `NOM6` IS"& _ 
                " NULL) OR (`NOM6` = ?)) AND ((? = 1 AND `LCL6` IS NULL) OR (`LCL6` = ?)) AND ((?"& _ 
                " = 1 AND `LSL6` IS NULL) OR (`LSL6` = ?)) AND ((? = 1 AND `SampleSize6` IS NULL)"& _ 
                " OR (`SampleSize6` = ?)) AND ((? = 1 AND `SampleFrequency6` IS NULL) OR (`Sample"& _ 
                "Frequency6` = ?)) AND ((? = 1 AND `NumberofSubGroups6` IS NULL) OR (`NumberofSub"& _ 
                "Groups6` = ?)) AND ((? = 1 AND `ParameterName7` IS NULL) OR (`ParameterName7` = "& _ 
                "?)) AND ((? = 1 AND `USL7` IS NULL) OR (`USL7` = ?)) AND ((? = 1 AND `UCL7` IS N"& _ 
                "ULL) OR (`UCL7` = ?)) AND ((? = 1 AND `NOM7` IS NULL) OR (`NOM7` = ?)) AND ((? ="& _ 
                " 1 AND `LCL7` IS NULL) OR (`LCL7` = ?)) AND ((? = 1 AND `LSL7` IS NULL) OR (`LSL"& _ 
                "7` = ?)) AND ((? = 1 AND `SampleSize7` IS NULL) OR (`SampleSize7` = ?)) AND ((? "& _ 
                "= 1 AND `SampleFrequency7` IS NULL) OR (`SampleFrequency7` = ?)) AND ((? = 1 AND"& _ 
                " `NumberofSubGroups7` IS NULL) OR (`NumberofSubGroups7` = ?)) AND ((? = 1 AND `P"& _ 
                "arameterName8` IS NULL) OR (`ParameterName8` = ?)) AND ((? = 1 AND `USL8` IS NUL"& _ 
                "L) OR (`USL8` = ?)) AND ((? = 1 AND `UCL8` IS NULL) OR (`UCL8` = ?)) AND ((? = 1"& _ 
                " AND `NOM8` IS NULL) OR (`NOM8` = ?)) AND ((? = 1 AND `LCL8` IS NULL) OR (`LCL8`"& _ 
                " = ?)) AND ((? = 1 AND `LSL8` IS NULL) OR (`LSL8` = ?)) AND ((? = 1 AND `SampleS"& _ 
                "ize8` IS NULL) OR (`SampleSize8` = ?)) AND ((? = 1 AND `SampleFrequency8` IS NUL"& _ 
                "L) OR (`SampleFrequency8` = ?)) AND ((? = 1 AND `NumberofSubGroups8` IS NULL) OR"& _ 
                " (`NumberofSubGroups8` = ?)) AND ((? = 1 AND `uslcolor` IS NULL) OR (`uslcolor` "& _ 
                "= ?)) AND ((? = 1 AND `uclcolor` IS NULL) OR (`uclcolor` = ?)) AND ((? = 1 AND `"& _ 
                "nvcolor` IS NULL) OR (`nvcolor` = ?)) AND ((? = 1 AND `lclcolor` IS NULL) OR (`l"& _ 
                "clcolor` = ?)) AND ((? = 1 AND `lslcolor` IS NULL) OR (`lslcolor` = ?)) AND ((? "& _ 
                "= 1 AND `machinenum` IS NULL) OR (`machinenum` = ?)) AND ((? = 1 AND `numberofpa"& _ 
                "rameters` IS NULL) OR (`numberofparameters` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberOfResults", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName5", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName6", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName7", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName8", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PartID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PartName", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PartName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Organisation", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_operatorname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberOfResults", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberOfResults", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName4", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName5", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName6", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName7", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName8", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nvcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_machinenum", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PartID, PartName, Organisation, AddressLine1, AddressLine2, AddressLine3, "& _ 
                "operatorname, NumberOfResults, ParameterName1, USL1, UCL1, NOM1, LCL1, LSL1, Sam"& _ 
                "pleSize1, SampleFrequency1, NumberofSubGroups1, ParameterName2, USL2, UCL2, NOM2"& _ 
                ", LCL2, LSL2, SampleSize2, SampleFrequency2, NumberofSubGroups2, ParameterName3,"& _ 
                " USL3, UCL3, NOM3, LCL3, LSL3, SampleSize3, SampleFrequency3, NumberofSubGroups3"& _ 
                ", ParameterName4, USL4, UCL4, NOM4, LCL4, LSL4, SampleSize4, SampleFrequency4, N"& _ 
                "umberofSubGroups4, ParameterName5, USL5, UCL5, NOM5, LCL5, LSL5, SampleSize5, Sa"& _ 
                "mpleFrequency5, NumberofSubGroups5, ParameterName6, USL6, UCL6, NOM6, LCL6, LSL6"& _ 
                ", SampleSize6, SampleFrequency6, NumberofSubGroups6, ParameterName7, USL7, UCL7,"& _ 
                " NOM7, LCL7, LSL7, SampleSize7, SampleFrequency7, NumberofSubGroups7, ParameterN"& _ 
                "ame8, USL8, UCL8, NOM8, LCL8, LSL8, SampleSize8, SampleFrequency8, NumberofSubGr"& _ 
                "oups8, uslcolor, uclcolor, nvcolor, lclcolor, lslcolor, machinenum, numberofpara"& _ 
                "meters FROM CustomerOctaGage"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM CustomerOctaGage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (PartID = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO CustomerOctaGage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (PartName, Organisation, Addr"& _ 
                "essLine1, AddressLine2, AddressLine3, operatorname, NumberOfResults, ParameterNa"& _ 
                "me1, USL1, UCL1, NOM1, LCL1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      LSL1, SampleSize1, SampleFr"& _ 
                "equency1, NumberofSubGroups1, ParameterName2, USL2, UCL2, NOM2, LCL2, LSL2, Samp"& _ 
                "leSize2, SampleFrequency2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      NumberofSubGroups2, Parameter"& _ 
                "Name3, USL3, UCL3, NOM3, LCL3, LSL3, SampleSize3, SampleFrequency3, NumberofSubG"& _ 
                "roups3, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ParameterName4, USL4, UCL4, NOM4, LCL4, LSL4, Sa"& _ 
                "mpleSize4, SampleFrequency4, NumberofSubGroups4, ParameterName5, USL5, UCL5, NOM"& _ 
                "5, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      LCL5, LSL5, SampleSize5, SampleFrequency5, NumberofSu"& _ 
                "bGroups5, ParameterName6, USL6, UCL6, NOM6, LCL6, LSL6, SampleSize6, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             SampleFrequency6, NumberofSubGroups6, ParameterName7, USL7, UCL7, N"& _ 
                "OM7, LCL7, LSL7, SampleSize7, SampleFrequency7, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Numberof"& _ 
                "SubGroups7, ParameterName8, USL8, UCL8, NOM8, LCL8, LSL8, SampleSize8, SampleFre"& _ 
                "quency8, NumberofSubGroups8, uslcolor, uclcolor,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                       nvcolor"& _ 
                ", lclcolor, lslcolor, machinenum, numberofparameters)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param2", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param3", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param4", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param5", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param6", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param7", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param8", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param9", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param10", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param13", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param14", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param15", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param16", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param17", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param18", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param19", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param20", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param21", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param22", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param23", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param24", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param25", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param26", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param27", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param28", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param29", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param30", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param31", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param32", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param33", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param34", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param35", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param36", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param37", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param38", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param39", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param40", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param41", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param42", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param43", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param44", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param45", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param46", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param47", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param48", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param49", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param50", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param51", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param52", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param53", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param54", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param55", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param56", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param57", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param58", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param59", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param60", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param61", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param62", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param63", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param64", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param65", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param66", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param67", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param68", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param69", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param70", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param71", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param72", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param73", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param74", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param75", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param76", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param77", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param78", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param79", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param80", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param81", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param82", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param83", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param84", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param85", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param86", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    CustomerOctaGage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              PartName = ?, Organisation = ?, Addr"& _ 
                "essLine1 = ?, AddressLine2 = ?, AddressLine3 = ?, operatorname = ?, NumberOfResu"& _ 
                "lts = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ParameterName1 = ?, USL1 = ?, UCL1 = ?, NOM1 = "& _ 
                "?, LCL1 = ?, LSL1 = ?, SampleSize1 = ?, SampleFrequency1 = ?, NumberofSubGroups1"& _ 
                " = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ParameterName2 = ?, USL2 = ?, UCL2 = ?, NOM2 = ?, "& _ 
                "LCL2 = ?, LSL2 = ?, SampleSize2 = ?, SampleFrequency2 = ?, NumberofSubGroups2 = "& _ 
                "?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ParameterName3 = ?, USL3 = ?, UCL3 = ?, NOM3 = ?, LCL"& _ 
                "3 = ?, LSL3 = ?, SampleSize3 = ?, SampleFrequency3 = ?, NumberofSubGroups3 = ?, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ParameterName4 = ?, USL4 = ?, UCL4 = ?, NOM4 = ?, LCL4 ="& _ 
                " ?, LSL4 = ?, SampleSize4 = ?, SampleFrequency4 = ?, NumberofSubGroups4 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     ParameterName5 = ?, USL5 = ?, UCL5 = ?, NOM5 = ?, LCL5 = ?,"& _ 
                " LSL5 = ?, SampleSize5 = ?, SampleFrequency5 = ?, NumberofSubGroups5 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ParameterName6 = ?, USL6 = ?, UCL6 = ?, NOM6 = ?, LCL6 = ?, LS"& _ 
                "L6 = ?, SampleSize6 = ?, SampleFrequency6 = ?, NumberofSubGroups6 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               ParameterName7 = ?, USL7 = ?, UCL7 = ?, NOM7 = ?, LCL7 = ?, LSL7 "& _ 
                "= ?, SampleSize7 = ?, SampleFrequency7 = ?, NumberofSubGroups7 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            ParameterName8 = ?, USL8 = ?, UCL8 = ?, NOM8 = ?, LCL8 = ?, LSL8 = ?"& _ 
                ", SampleSize8 = ?, SampleFrequency8 = ?, NumberofSubGroups8 = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         uslcolor = ?, uclcolor = ?, nvcolor = ?, lclcolor = ?, lslcolor = ?, ma"& _ 
                "chinenum = ?, numberofparameters = ?"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PartName", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PartName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberOfResults", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberOfResults", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName1", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL1", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups1", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName2", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL2", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups2", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName3", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL3", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups3", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName4", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL4", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups4", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups4", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName5", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL5", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups5", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups5", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName6", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL6", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups6", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups6", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName7", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL7", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups7", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups7", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName8", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "USL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "UCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "NOM8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LCL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL8", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "LSL8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups8", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups8", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("numberofparameters", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "numberofparameters", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.CustomerOctaGageDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.CustomerOctaGageDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.CustomerOctaGageDataTable = New VersaGageMonitorDataSet.CustomerOctaGageDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.CustomerOctaGageDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomerOctaGage")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PartID As Integer,  _
                    ByVal Original_PartName As String,  _
                    ByVal Original_Organisation As String,  _
                    ByVal Original_AddressLine1 As String,  _
                    ByVal Original_AddressLine2 As String,  _
                    ByVal Original_AddressLine3 As String,  _
                    ByVal Original_operatorname As String,  _
                    ByVal Original_NumberOfResults As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName1 As String,  _
                    ByVal Original_USL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName2 As String,  _
                    ByVal Original_USL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName3 As String,  _
                    ByVal Original_USL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName4 As String,  _
                    ByVal Original_USL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName5 As String,  _
                    ByVal Original_USL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName6 As String,  _
                    ByVal Original_USL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName7 As String,  _
                    ByVal Original_USL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName8 As String,  _
                    ByVal Original_USL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_uslcolor As String,  _
                    ByVal Original_uclcolor As String,  _
                    ByVal Original_nvcolor As String,  _
                    ByVal Original_lclcolor As String,  _
                    ByVal Original_lslcolor As String,  _
                    ByVal Original_machinenum As String,  _
                    ByVal Original_numberofparameters As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PartID,Integer)
            If (Original_PartName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PartName,String)
            End If
            If (Original_Organisation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Organisation,String)
            End If
            If (Original_AddressLine1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_AddressLine1,String)
            End If
            If (Original_AddressLine2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_AddressLine2,String)
            End If
            If (Original_AddressLine3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_AddressLine3,String)
            End If
            If (Original_operatorname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_operatorname,String)
            End If
            If (Original_NumberOfResults.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_NumberOfResults.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ParameterName1,String)
            End If
            If (Original_USL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_USL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_UCL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_NOM1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_LCL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_LSL1.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_SampleSize1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_SampleFrequency1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_NumberofSubGroups1.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_ParameterName2,String)
            End If
            If (Original_USL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_USL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_UCL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_NOM2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_LCL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_LSL2.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_SampleSize2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_SampleFrequency2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_NumberofSubGroups2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_ParameterName3,String)
            End If
            If (Original_USL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_USL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_UCL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_NOM3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_LCL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_LSL3.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_SampleSize3.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_SampleFrequency3.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_NumberofSubGroups3.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_ParameterName4,String)
            End If
            If (Original_USL4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_USL4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_UCL4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_NOM4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_LCL4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_LSL4.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_SampleSize4.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_SampleFrequency4.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_NumberofSubGroups4.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_ParameterName5,String)
            End If
            If (Original_USL5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_USL5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_UCL5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_NOM5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_LCL5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_LSL5.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_SampleSize5.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_SampleFrequency5.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(Original_NumberofSubGroups5.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(Original_ParameterName6,String)
            End If
            If (Original_USL6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_USL6.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_UCL6.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_NOM6.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(Original_LCL6.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(Original_LSL6.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(Original_SampleSize6.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(Original_SampleFrequency6.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(Original_NumberofSubGroups6.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(Original_ParameterName7,String)
            End If
            If (Original_USL7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(Original_USL7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(Original_UCL7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(Original_NOM7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(Original_LCL7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = CType(Original_LSL7.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = CType(Original_SampleSize7.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = CType(Original_SampleFrequency7.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(140).Value = CType(Original_NumberofSubGroups7.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(140).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(142).Value = CType(Original_ParameterName8,String)
            End If
            If (Original_USL8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(144).Value = CType(Original_USL8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(144).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(146).Value = CType(Original_UCL8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(146).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(148).Value = CType(Original_NOM8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(148).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(150).Value = CType(Original_LCL8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(150).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(151).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(152).Value = CType(Original_LSL8.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(151).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(152).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(153).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(154).Value = CType(Original_SampleSize8.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(153).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(154).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(155).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(156).Value = CType(Original_SampleFrequency8.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(155).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(156).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(157).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(158).Value = CType(Original_NumberofSubGroups8.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(157).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(158).Value = Global.System.DBNull.Value
            End If
            If (Original_uslcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(159).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(160).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(159).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(160).Value = CType(Original_uslcolor,String)
            End If
            If (Original_uclcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(161).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(162).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(161).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(162).Value = CType(Original_uclcolor,String)
            End If
            If (Original_nvcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(163).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(164).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(163).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(164).Value = CType(Original_nvcolor,String)
            End If
            If (Original_lclcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(165).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(166).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(165).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(166).Value = CType(Original_lclcolor,String)
            End If
            If (Original_lslcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(167).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(168).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(167).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(168).Value = CType(Original_lslcolor,String)
            End If
            If (Original_machinenum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(169).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(170).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(169).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(170).Value = CType(Original_machinenum,String)
            End If
            If (Original_numberofparameters.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(171).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(172).Value = CType(Original_numberofparameters.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(171).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(172).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PartName As String,  _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal operatorname As String,  _
                    ByVal NumberOfResults As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName1 As String,  _
                    ByVal USL1 As Global.System.Nullable(Of Double),  _
                    ByVal UCL1 As Global.System.Nullable(Of Double),  _
                    ByVal NOM1 As Global.System.Nullable(Of Double),  _
                    ByVal LCL1 As Global.System.Nullable(Of Double),  _
                    ByVal LSL1 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize1 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency1 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups1 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName2 As String,  _
                    ByVal USL2 As Global.System.Nullable(Of Double),  _
                    ByVal UCL2 As Global.System.Nullable(Of Double),  _
                    ByVal NOM2 As Global.System.Nullable(Of Double),  _
                    ByVal LCL2 As Global.System.Nullable(Of Double),  _
                    ByVal LSL2 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize2 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency2 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups2 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName3 As String,  _
                    ByVal USL3 As Global.System.Nullable(Of Double),  _
                    ByVal UCL3 As Global.System.Nullable(Of Double),  _
                    ByVal NOM3 As Global.System.Nullable(Of Double),  _
                    ByVal LCL3 As Global.System.Nullable(Of Double),  _
                    ByVal LSL3 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize3 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency3 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups3 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName4 As String,  _
                    ByVal USL4 As Global.System.Nullable(Of Double),  _
                    ByVal UCL4 As Global.System.Nullable(Of Double),  _
                    ByVal NOM4 As Global.System.Nullable(Of Double),  _
                    ByVal LCL4 As Global.System.Nullable(Of Double),  _
                    ByVal LSL4 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize4 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency4 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups4 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName5 As String,  _
                    ByVal USL5 As Global.System.Nullable(Of Double),  _
                    ByVal UCL5 As Global.System.Nullable(Of Double),  _
                    ByVal NOM5 As Global.System.Nullable(Of Double),  _
                    ByVal LCL5 As Global.System.Nullable(Of Double),  _
                    ByVal LSL5 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize5 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency5 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups5 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName6 As String,  _
                    ByVal USL6 As Global.System.Nullable(Of Double),  _
                    ByVal UCL6 As Global.System.Nullable(Of Double),  _
                    ByVal NOM6 As Global.System.Nullable(Of Double),  _
                    ByVal LCL6 As Global.System.Nullable(Of Double),  _
                    ByVal LSL6 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize6 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency6 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups6 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName7 As String,  _
                    ByVal USL7 As Global.System.Nullable(Of Double),  _
                    ByVal UCL7 As Global.System.Nullable(Of Double),  _
                    ByVal NOM7 As Global.System.Nullable(Of Double),  _
                    ByVal LCL7 As Global.System.Nullable(Of Double),  _
                    ByVal LSL7 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize7 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency7 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups7 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName8 As String,  _
                    ByVal USL8 As Global.System.Nullable(Of Double),  _
                    ByVal UCL8 As Global.System.Nullable(Of Double),  _
                    ByVal NOM8 As Global.System.Nullable(Of Double),  _
                    ByVal LCL8 As Global.System.Nullable(Of Double),  _
                    ByVal LSL8 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize8 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency8 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups8 As Global.System.Nullable(Of Short),  _
                    ByVal uslcolor As String,  _
                    ByVal uclcolor As String,  _
                    ByVal nvcolor As String,  _
                    ByVal lclcolor As String,  _
                    ByVal lslcolor As String,  _
                    ByVal machinenum As String,  _
                    ByVal numberofparameters As Global.System.Nullable(Of Integer)) As Integer
            If (PartName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PartName,String)
            End If
            If (Organisation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AddressLine3,String)
            End If
            If (operatorname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(operatorname,String)
            End If
            If (NumberOfResults.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(NumberOfResults.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ParameterName1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ParameterName1,String)
            End If
            If (USL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(USL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UCL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UCL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (NOM1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(NOM1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LCL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(LCL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LSL1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(LSL1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SampleSize1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SampleSize1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SampleFrequency1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(NumberofSubGroups1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ParameterName2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ParameterName2,String)
            End If
            If (USL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(USL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UCL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(UCL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (NOM2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(NOM2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LCL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(LCL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (LSL2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(LSL2.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (SampleSize2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SampleSize2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SampleFrequency2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(NumberofSubGroups2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (ParameterName3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(ParameterName3,String)
            End If
            If (USL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(USL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (UCL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(UCL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (NOM3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(NOM3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (LCL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(LCL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (LSL3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(LSL3.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (SampleSize3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(SampleSize3.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(SampleFrequency3.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(NumberofSubGroups3.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ParameterName4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ParameterName4,String)
            End If
            If (USL4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(USL4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (UCL4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(UCL4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NOM4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(NOM4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (LCL4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(LCL4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (LSL4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(LSL4.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (SampleSize4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(SampleSize4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(SampleFrequency4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(NumberofSubGroups4.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ParameterName5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(ParameterName5,String)
            End If
            If (USL5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(USL5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (UCL5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(UCL5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (NOM5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(NOM5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LCL5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(LCL5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (LSL5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(LSL5.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (SampleSize5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(SampleSize5.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(SampleFrequency5.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(NumberofSubGroups5.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (ParameterName6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(ParameterName6,String)
            End If
            If (USL6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(USL6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (UCL6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(UCL6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (NOM6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(NOM6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LCL6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(LCL6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (LSL6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(LSL6.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (SampleSize6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(SampleSize6.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(SampleFrequency6.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(NumberofSubGroups6.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ParameterName7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(ParameterName7,String)
            End If
            If (USL7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(USL7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (UCL7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(UCL7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (NOM7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(NOM7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (LCL7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(LCL7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (LSL7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(LSL7.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (SampleSize7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(SampleSize7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(SampleFrequency7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(NumberofSubGroups7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (ParameterName8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(ParameterName8,String)
            End If
            If (USL8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(USL8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (UCL8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(UCL8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (NOM8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(NOM8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (LCL8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(LCL8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (LSL8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(LSL8.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (SampleSize8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(SampleSize8.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(77).Value = CType(SampleFrequency8.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(78).Value = CType(NumberofSubGroups8.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(79).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(80).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(81).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(82).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(83).Value = CType(lslcolor,String)
            End If
            If (machinenum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(84).Value = CType(machinenum,String)
            End If
            If (numberofparameters.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(85).Value = CType(numberofparameters.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PartName As String,  _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal operatorname As String,  _
                    ByVal NumberOfResults As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName1 As String,  _
                    ByVal USL1 As Global.System.Nullable(Of Double),  _
                    ByVal UCL1 As Global.System.Nullable(Of Double),  _
                    ByVal NOM1 As Global.System.Nullable(Of Double),  _
                    ByVal LCL1 As Global.System.Nullable(Of Double),  _
                    ByVal LSL1 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize1 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency1 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups1 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName2 As String,  _
                    ByVal USL2 As Global.System.Nullable(Of Double),  _
                    ByVal UCL2 As Global.System.Nullable(Of Double),  _
                    ByVal NOM2 As Global.System.Nullable(Of Double),  _
                    ByVal LCL2 As Global.System.Nullable(Of Double),  _
                    ByVal LSL2 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize2 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency2 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups2 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName3 As String,  _
                    ByVal USL3 As Global.System.Nullable(Of Double),  _
                    ByVal UCL3 As Global.System.Nullable(Of Double),  _
                    ByVal NOM3 As Global.System.Nullable(Of Double),  _
                    ByVal LCL3 As Global.System.Nullable(Of Double),  _
                    ByVal LSL3 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize3 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency3 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups3 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName4 As String,  _
                    ByVal USL4 As Global.System.Nullable(Of Double),  _
                    ByVal UCL4 As Global.System.Nullable(Of Double),  _
                    ByVal NOM4 As Global.System.Nullable(Of Double),  _
                    ByVal LCL4 As Global.System.Nullable(Of Double),  _
                    ByVal LSL4 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize4 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency4 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups4 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName5 As String,  _
                    ByVal USL5 As Global.System.Nullable(Of Double),  _
                    ByVal UCL5 As Global.System.Nullable(Of Double),  _
                    ByVal NOM5 As Global.System.Nullable(Of Double),  _
                    ByVal LCL5 As Global.System.Nullable(Of Double),  _
                    ByVal LSL5 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize5 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency5 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups5 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName6 As String,  _
                    ByVal USL6 As Global.System.Nullable(Of Double),  _
                    ByVal UCL6 As Global.System.Nullable(Of Double),  _
                    ByVal NOM6 As Global.System.Nullable(Of Double),  _
                    ByVal LCL6 As Global.System.Nullable(Of Double),  _
                    ByVal LSL6 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize6 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency6 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups6 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName7 As String,  _
                    ByVal USL7 As Global.System.Nullable(Of Double),  _
                    ByVal UCL7 As Global.System.Nullable(Of Double),  _
                    ByVal NOM7 As Global.System.Nullable(Of Double),  _
                    ByVal LCL7 As Global.System.Nullable(Of Double),  _
                    ByVal LSL7 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize7 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency7 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups7 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName8 As String,  _
                    ByVal USL8 As Global.System.Nullable(Of Double),  _
                    ByVal UCL8 As Global.System.Nullable(Of Double),  _
                    ByVal NOM8 As Global.System.Nullable(Of Double),  _
                    ByVal LCL8 As Global.System.Nullable(Of Double),  _
                    ByVal LSL8 As Global.System.Nullable(Of Double),  _
                    ByVal SampleSize8 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency8 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups8 As Global.System.Nullable(Of Short),  _
                    ByVal uslcolor As String,  _
                    ByVal uclcolor As String,  _
                    ByVal nvcolor As String,  _
                    ByVal lclcolor As String,  _
                    ByVal lslcolor As String,  _
                    ByVal machinenum As String,  _
                    ByVal numberofparameters As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PartID As Integer,  _
                    ByVal Original_PartName As String,  _
                    ByVal Original_Organisation As String,  _
                    ByVal Original_AddressLine1 As String,  _
                    ByVal Original_AddressLine2 As String,  _
                    ByVal Original_AddressLine3 As String,  _
                    ByVal Original_operatorname As String,  _
                    ByVal Original_NumberOfResults As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName1 As String,  _
                    ByVal Original_USL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL1 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups1 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName2 As String,  _
                    ByVal Original_USL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL2 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName3 As String,  _
                    ByVal Original_USL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL3 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups3 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName4 As String,  _
                    ByVal Original_USL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL4 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups4 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName5 As String,  _
                    ByVal Original_USL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL5 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups5 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName6 As String,  _
                    ByVal Original_USL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL6 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups6 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName7 As String,  _
                    ByVal Original_USL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL7 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups7 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ParameterName8 As String,  _
                    ByVal Original_USL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_UCL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_NOM8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LCL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_LSL8 As Global.System.Nullable(Of Double),  _
                    ByVal Original_SampleSize8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups8 As Global.System.Nullable(Of Short),  _
                    ByVal Original_uslcolor As String,  _
                    ByVal Original_uclcolor As String,  _
                    ByVal Original_nvcolor As String,  _
                    ByVal Original_lclcolor As String,  _
                    ByVal Original_lslcolor As String,  _
                    ByVal Original_machinenum As String,  _
                    ByVal Original_numberofparameters As Global.System.Nullable(Of Integer)) As Integer
            If (PartName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PartName,String)
            End If
            If (Organisation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AddressLine3,String)
            End If
            If (operatorname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(operatorname,String)
            End If
            If (NumberOfResults.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(NumberOfResults.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ParameterName1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ParameterName1,String)
            End If
            If (USL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UCL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UCL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (NOM1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(NOM1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LCL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(LCL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LSL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LSL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SampleSize1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SampleSize1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SampleFrequency1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(NumberofSubGroups1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ParameterName2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ParameterName2,String)
            End If
            If (USL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(USL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UCL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(UCL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (NOM2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(NOM2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LCL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LCL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (LSL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(LSL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (SampleSize2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SampleSize2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SampleFrequency2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(NumberofSubGroups2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (ParameterName3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ParameterName3,String)
            End If
            If (USL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(USL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (UCL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(UCL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (NOM3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(NOM3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (LCL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(LCL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (LSL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(LSL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (SampleSize3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(SampleSize3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(SampleFrequency3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(NumberofSubGroups3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ParameterName4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ParameterName4,String)
            End If
            If (USL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(USL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (UCL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(UCL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NOM4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(NOM4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (LCL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(LCL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (LSL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(LSL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (SampleSize4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(SampleSize4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(SampleFrequency4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(NumberofSubGroups4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ParameterName5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(ParameterName5,String)
            End If
            If (USL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(USL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (UCL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(UCL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (NOM5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(NOM5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LCL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(LCL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (LSL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(LSL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (SampleSize5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(SampleSize5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(SampleFrequency5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(NumberofSubGroups5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (ParameterName6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(ParameterName6,String)
            End If
            If (USL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(USL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (UCL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(UCL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (NOM6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(NOM6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LCL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(LCL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (LSL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(LSL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (SampleSize6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(SampleSize6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(SampleFrequency6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(NumberofSubGroups6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ParameterName7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(ParameterName7,String)
            End If
            If (USL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(USL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (UCL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(UCL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (NOM7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(NOM7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (LCL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(LCL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (LSL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(LSL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (SampleSize7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(SampleSize7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(SampleFrequency7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(NumberofSubGroups7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (ParameterName8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(ParameterName8,String)
            End If
            If (USL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(USL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (UCL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(UCL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (NOM8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(NOM8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (LCL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(LCL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (LSL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(LSL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (SampleSize8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(SampleSize8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(SampleFrequency8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(NumberofSubGroups8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(lslcolor,String)
            End If
            If (machinenum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(machinenum,String)
            End If
            If (numberofparameters.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(numberofparameters.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_PartID,Integer)
            If (Original_PartName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_PartName,String)
            End If
            If (Original_Organisation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_Organisation,String)
            End If
            If (Original_AddressLine1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_AddressLine1,String)
            End If
            If (Original_AddressLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_AddressLine2,String)
            End If
            If (Original_AddressLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_AddressLine3,String)
            End If
            If (Original_operatorname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_operatorname,String)
            End If
            If (Original_NumberOfResults.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_NumberOfResults.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_ParameterName1,String)
            End If
            If (Original_USL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_USL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_UCL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_NOM1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_LCL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_LSL1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_SampleSize1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_SampleFrequency1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_NumberofSubGroups1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_ParameterName2,String)
            End If
            If (Original_USL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_USL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_UCL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_NOM2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_LCL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_LSL2.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_SampleSize2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_SampleFrequency2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(Original_NumberofSubGroups2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(Original_ParameterName3,String)
            End If
            If (Original_USL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(Original_USL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_UCL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_NOM3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(Original_LCL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(Original_LSL3.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(Original_SampleSize3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_SampleFrequency3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(Original_NumberofSubGroups3.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(Original_ParameterName4,String)
            End If
            If (Original_USL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(Original_USL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(Original_UCL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(Original_NOM4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(Original_LCL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(Original_LSL4.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(Original_SampleSize4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(Original_SampleFrequency4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(Original_NumberofSubGroups4.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(Original_ParameterName5,String)
            End If
            If (Original_USL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(Original_USL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(Original_UCL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(Original_NOM5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(Original_LCL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(Original_LSL5.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(Original_SampleSize5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(Original_SampleFrequency5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(Original_NumberofSubGroups5.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(Original_ParameterName6,String)
            End If
            If (Original_USL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(Original_USL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(Original_UCL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(Original_NOM6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(198).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(Original_LCL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(200).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(Original_LSL6.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(202).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(Original_SampleSize6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(204).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(Original_SampleFrequency6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(206).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(Original_NumberofSubGroups6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(208).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(209).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(210).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(209).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(210).Value = CType(Original_ParameterName7,String)
            End If
            If (Original_USL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(211).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(212).Value = CType(Original_USL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(211).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(212).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(213).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(214).Value = CType(Original_UCL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(213).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(214).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(215).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(216).Value = CType(Original_NOM7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(215).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(216).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(217).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(218).Value = CType(Original_LCL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(217).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(218).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(219).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(220).Value = CType(Original_LSL7.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(219).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(220).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(221).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(222).Value = CType(Original_SampleSize7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(221).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(222).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(223).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(224).Value = CType(Original_SampleFrequency7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(223).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(224).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(225).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(226).Value = CType(Original_NumberofSubGroups7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(225).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(226).Value = Global.System.DBNull.Value
            End If
            If (Original_ParameterName8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(227).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(228).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(227).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(228).Value = CType(Original_ParameterName8,String)
            End If
            If (Original_USL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(229).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(230).Value = CType(Original_USL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(229).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(230).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(231).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(232).Value = CType(Original_UCL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(231).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(232).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(233).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(234).Value = CType(Original_NOM8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(233).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(234).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(235).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(236).Value = CType(Original_LCL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(235).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(236).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(237).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(238).Value = CType(Original_LSL8.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(237).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(238).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(239).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(240).Value = CType(Original_SampleSize8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(239).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(240).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(241).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(242).Value = CType(Original_SampleFrequency8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(241).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(242).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(243).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(244).Value = CType(Original_NumberofSubGroups8.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(243).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(244).Value = Global.System.DBNull.Value
            End If
            If (Original_uslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(245).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(246).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(245).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(246).Value = CType(Original_uslcolor,String)
            End If
            If (Original_uclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(247).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(248).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(247).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(248).Value = CType(Original_uclcolor,String)
            End If
            If (Original_nvcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(249).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(250).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(249).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(250).Value = CType(Original_nvcolor,String)
            End If
            If (Original_lclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(251).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(252).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(251).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(252).Value = CType(Original_lclcolor,String)
            End If
            If (Original_lslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(253).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(254).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(253).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(254).Value = CType(Original_lslcolor,String)
            End If
            If (Original_machinenum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(255).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(256).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(255).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(256).Value = CType(Original_machinenum,String)
            End If
            If (Original_numberofparameters.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(257).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(258).Value = CType(Original_numberofparameters.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(257).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(258).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal PartID As Integer) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(PartID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery( _
                    ByVal numberofparameters As Global.System.Nullable(Of Integer),  _
                    ByVal Param2 As String,  _
                    ByVal Param3 As String,  _
                    ByVal Param4 As String,  _
                    ByVal Param5 As String,  _
                    ByVal Param6 As String,  _
                    ByVal Param7 As String,  _
                    ByVal Param8 As String,  _
                    ByVal Param9 As String,  _
                    ByVal Param10 As String,  _
                    ByVal Param11 As String,  _
                    ByVal Param12 As String,  _
                    ByVal Param13 As String,  _
                    ByVal Param14 As String,  _
                    ByVal Param15 As String,  _
                    ByVal Param16 As String,  _
                    ByVal Param17 As String,  _
                    ByVal Param18 As String,  _
                    ByVal Param19 As String,  _
                    ByVal Param20 As String,  _
                    ByVal Param21 As String,  _
                    ByVal Param22 As String,  _
                    ByVal Param23 As String,  _
                    ByVal Param24 As String,  _
                    ByVal Param25 As String,  _
                    ByVal Param26 As String,  _
                    ByVal Param27 As String,  _
                    ByVal Param28 As String,  _
                    ByVal Param29 As String,  _
                    ByVal Param30 As String,  _
                    ByVal Param31 As String,  _
                    ByVal Param32 As String,  _
                    ByVal Param33 As String,  _
                    ByVal Param34 As String,  _
                    ByVal Param35 As String,  _
                    ByVal Param36 As String,  _
                    ByVal Param37 As String,  _
                    ByVal Param38 As String,  _
                    ByVal Param39 As String,  _
                    ByVal Param40 As String,  _
                    ByVal Param41 As String,  _
                    ByVal Param42 As String,  _
                    ByVal Param43 As String,  _
                    ByVal Param44 As String,  _
                    ByVal Param45 As String,  _
                    ByVal Param46 As String,  _
                    ByVal Param47 As String,  _
                    ByVal Param48 As String,  _
                    ByVal Param49 As String,  _
                    ByVal Param50 As String,  _
                    ByVal Param51 As String,  _
                    ByVal Param52 As String,  _
                    ByVal Param53 As String,  _
                    ByVal Param54 As String,  _
                    ByVal Param55 As String,  _
                    ByVal Param56 As String,  _
                    ByVal Param57 As String,  _
                    ByVal Param58 As String,  _
                    ByVal Param59 As String,  _
                    ByVal Param60 As String,  _
                    ByVal Param61 As String,  _
                    ByVal Param62 As String,  _
                    ByVal Param63 As String,  _
                    ByVal Param64 As String,  _
                    ByVal Param65 As String,  _
                    ByVal Param66 As String,  _
                    ByVal Param67 As String,  _
                    ByVal Param68 As String,  _
                    ByVal Param69 As String,  _
                    ByVal Param70 As String,  _
                    ByVal Param71 As String,  _
                    ByVal Param72 As String,  _
                    ByVal Param73 As String,  _
                    ByVal Param74 As String,  _
                    ByVal Param75 As String,  _
                    ByVal Param76 As String,  _
                    ByVal Param77 As String,  _
                    ByVal Param78 As String,  _
                    ByVal Param79 As String,  _
                    ByVal Param80 As String,  _
                    ByVal Param81 As String,  _
                    ByVal Param82 As String,  _
                    ByVal Param83 As String,  _
                    ByVal Param84 As String,  _
                    ByVal Param85 As String,  _
                    ByVal Param86 As String) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(2)
            If (numberofparameters.HasValue = true) Then
                command.Parameters(0).Value = CType(numberofparameters.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Param2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param2")
            Else
                command.Parameters(1).Value = CType(Param2,String)
            End If
            If (Param3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param3")
            Else
                command.Parameters(2).Value = CType(Param3,String)
            End If
            If (Param4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param4")
            Else
                command.Parameters(3).Value = CType(Param4,String)
            End If
            If (Param5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param5")
            Else
                command.Parameters(4).Value = CType(Param5,String)
            End If
            If (Param6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param6")
            Else
                command.Parameters(5).Value = CType(Param6,String)
            End If
            If (Param7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param7")
            Else
                command.Parameters(6).Value = CType(Param7,String)
            End If
            If (Param8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param8")
            Else
                command.Parameters(7).Value = CType(Param8,String)
            End If
            If (Param9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param9")
            Else
                command.Parameters(8).Value = CType(Param9,String)
            End If
            If (Param10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param10")
            Else
                command.Parameters(9).Value = CType(Param10,String)
            End If
            If (Param11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param11")
            Else
                command.Parameters(10).Value = CType(Param11,String)
            End If
            If (Param12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param12")
            Else
                command.Parameters(11).Value = CType(Param12,String)
            End If
            If (Param13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param13")
            Else
                command.Parameters(12).Value = CType(Param13,String)
            End If
            If (Param14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param14")
            Else
                command.Parameters(13).Value = CType(Param14,String)
            End If
            If (Param15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param15")
            Else
                command.Parameters(14).Value = CType(Param15,String)
            End If
            If (Param16 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param16")
            Else
                command.Parameters(15).Value = CType(Param16,String)
            End If
            If (Param17 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param17")
            Else
                command.Parameters(16).Value = CType(Param17,String)
            End If
            If (Param18 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param18")
            Else
                command.Parameters(17).Value = CType(Param18,String)
            End If
            If (Param19 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param19")
            Else
                command.Parameters(18).Value = CType(Param19,String)
            End If
            If (Param20 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param20")
            Else
                command.Parameters(19).Value = CType(Param20,String)
            End If
            If (Param21 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param21")
            Else
                command.Parameters(20).Value = CType(Param21,String)
            End If
            If (Param22 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param22")
            Else
                command.Parameters(21).Value = CType(Param22,String)
            End If
            If (Param23 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param23")
            Else
                command.Parameters(22).Value = CType(Param23,String)
            End If
            If (Param24 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param24")
            Else
                command.Parameters(23).Value = CType(Param24,String)
            End If
            If (Param25 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param25")
            Else
                command.Parameters(24).Value = CType(Param25,String)
            End If
            If (Param26 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param26")
            Else
                command.Parameters(25).Value = CType(Param26,String)
            End If
            If (Param27 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param27")
            Else
                command.Parameters(26).Value = CType(Param27,String)
            End If
            If (Param28 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param28")
            Else
                command.Parameters(27).Value = CType(Param28,String)
            End If
            If (Param29 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param29")
            Else
                command.Parameters(28).Value = CType(Param29,String)
            End If
            If (Param30 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param30")
            Else
                command.Parameters(29).Value = CType(Param30,String)
            End If
            If (Param31 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param31")
            Else
                command.Parameters(30).Value = CType(Param31,String)
            End If
            If (Param32 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param32")
            Else
                command.Parameters(31).Value = CType(Param32,String)
            End If
            If (Param33 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param33")
            Else
                command.Parameters(32).Value = CType(Param33,String)
            End If
            If (Param34 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param34")
            Else
                command.Parameters(33).Value = CType(Param34,String)
            End If
            If (Param35 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param35")
            Else
                command.Parameters(34).Value = CType(Param35,String)
            End If
            If (Param36 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param36")
            Else
                command.Parameters(35).Value = CType(Param36,String)
            End If
            If (Param37 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param37")
            Else
                command.Parameters(36).Value = CType(Param37,String)
            End If
            If (Param38 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param38")
            Else
                command.Parameters(37).Value = CType(Param38,String)
            End If
            If (Param39 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param39")
            Else
                command.Parameters(38).Value = CType(Param39,String)
            End If
            If (Param40 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param40")
            Else
                command.Parameters(39).Value = CType(Param40,String)
            End If
            If (Param41 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param41")
            Else
                command.Parameters(40).Value = CType(Param41,String)
            End If
            If (Param42 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param42")
            Else
                command.Parameters(41).Value = CType(Param42,String)
            End If
            If (Param43 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param43")
            Else
                command.Parameters(42).Value = CType(Param43,String)
            End If
            If (Param44 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param44")
            Else
                command.Parameters(43).Value = CType(Param44,String)
            End If
            If (Param45 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param45")
            Else
                command.Parameters(44).Value = CType(Param45,String)
            End If
            If (Param46 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param46")
            Else
                command.Parameters(45).Value = CType(Param46,String)
            End If
            If (Param47 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param47")
            Else
                command.Parameters(46).Value = CType(Param47,String)
            End If
            If (Param48 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param48")
            Else
                command.Parameters(47).Value = CType(Param48,String)
            End If
            If (Param49 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param49")
            Else
                command.Parameters(48).Value = CType(Param49,String)
            End If
            If (Param50 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param50")
            Else
                command.Parameters(49).Value = CType(Param50,String)
            End If
            If (Param51 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param51")
            Else
                command.Parameters(50).Value = CType(Param51,String)
            End If
            If (Param52 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param52")
            Else
                command.Parameters(51).Value = CType(Param52,String)
            End If
            If (Param53 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param53")
            Else
                command.Parameters(52).Value = CType(Param53,String)
            End If
            If (Param54 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param54")
            Else
                command.Parameters(53).Value = CType(Param54,String)
            End If
            If (Param55 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param55")
            Else
                command.Parameters(54).Value = CType(Param55,String)
            End If
            If (Param56 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param56")
            Else
                command.Parameters(55).Value = CType(Param56,String)
            End If
            If (Param57 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param57")
            Else
                command.Parameters(56).Value = CType(Param57,String)
            End If
            If (Param58 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param58")
            Else
                command.Parameters(57).Value = CType(Param58,String)
            End If
            If (Param59 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param59")
            Else
                command.Parameters(58).Value = CType(Param59,String)
            End If
            If (Param60 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param60")
            Else
                command.Parameters(59).Value = CType(Param60,String)
            End If
            If (Param61 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param61")
            Else
                command.Parameters(60).Value = CType(Param61,String)
            End If
            If (Param62 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param62")
            Else
                command.Parameters(61).Value = CType(Param62,String)
            End If
            If (Param63 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param63")
            Else
                command.Parameters(62).Value = CType(Param63,String)
            End If
            If (Param64 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param64")
            Else
                command.Parameters(63).Value = CType(Param64,String)
            End If
            If (Param65 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param65")
            Else
                command.Parameters(64).Value = CType(Param65,String)
            End If
            If (Param66 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param66")
            Else
                command.Parameters(65).Value = CType(Param66,String)
            End If
            If (Param67 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param67")
            Else
                command.Parameters(66).Value = CType(Param67,String)
            End If
            If (Param68 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param68")
            Else
                command.Parameters(67).Value = CType(Param68,String)
            End If
            If (Param69 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param69")
            Else
                command.Parameters(68).Value = CType(Param69,String)
            End If
            If (Param70 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param70")
            Else
                command.Parameters(69).Value = CType(Param70,String)
            End If
            If (Param71 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param71")
            Else
                command.Parameters(70).Value = CType(Param71,String)
            End If
            If (Param72 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param72")
            Else
                command.Parameters(71).Value = CType(Param72,String)
            End If
            If (Param73 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param73")
            Else
                command.Parameters(72).Value = CType(Param73,String)
            End If
            If (Param74 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param74")
            Else
                command.Parameters(73).Value = CType(Param74,String)
            End If
            If (Param75 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param75")
            Else
                command.Parameters(74).Value = CType(Param75,String)
            End If
            If (Param76 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param76")
            Else
                command.Parameters(75).Value = CType(Param76,String)
            End If
            If (Param77 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param77")
            Else
                command.Parameters(76).Value = CType(Param77,String)
            End If
            If (Param78 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param78")
            Else
                command.Parameters(77).Value = CType(Param78,String)
            End If
            If (Param79 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param79")
            Else
                command.Parameters(78).Value = CType(Param79,String)
            End If
            If (Param80 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param80")
            Else
                command.Parameters(79).Value = CType(Param80,String)
            End If
            If (Param81 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param81")
            Else
                command.Parameters(80).Value = CType(Param81,String)
            End If
            If (Param82 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param82")
            Else
                command.Parameters(81).Value = CType(Param82,String)
            End If
            If (Param83 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param83")
            Else
                command.Parameters(82).Value = CType(Param83,String)
            End If
            If (Param84 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param84")
            Else
                command.Parameters(83).Value = CType(Param84,String)
            End If
            If (Param85 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param85")
            Else
                command.Parameters(84).Value = CType(Param85,String)
            End If
            If (Param86 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param86")
            Else
                command.Parameters(85).Value = CType(Param86,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateQuery( _
                    ByVal PartName As String,  _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal operatorname As String,  _
                    ByVal NumberOfResults As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName1 As String,  _
                    ByVal USL1 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL1 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL1 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL1 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize1 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency1 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups1 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName2 As String,  _
                    ByVal USL2 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL2 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL2 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL2 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize2 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency2 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups2 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName3 As String,  _
                    ByVal USL3 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL3 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM3 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL3 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL3 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize3 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency3 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups3 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName4 As String,  _
                    ByVal USL4 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL4 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM4 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL4 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL4 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize4 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency4 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups4 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName5 As String,  _
                    ByVal USL5 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL5 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM5 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL5 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL5 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize5 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency5 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups5 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName6 As String,  _
                    ByVal USL6 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL6 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM6 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL6 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL6 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize6 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency6 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups6 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName7 As String,  _
                    ByVal USL7 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL7 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM7 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL7 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL7 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize7 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency7 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups7 As Global.System.Nullable(Of Short),  _
                    ByVal ParameterName8 As String,  _
                    ByVal USL8 As Global.System.Nullable(Of Decimal),  _
                    ByVal UCL8 As Global.System.Nullable(Of Decimal),  _
                    ByVal NOM8 As Global.System.Nullable(Of Decimal),  _
                    ByVal LCL8 As Global.System.Nullable(Of Decimal),  _
                    ByVal LSL8 As Global.System.Nullable(Of Decimal),  _
                    ByVal SampleSize8 As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency8 As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups8 As Global.System.Nullable(Of Short),  _
                    ByVal uslcolor As String,  _
                    ByVal uclcolor As String,  _
                    ByVal nvcolor As String,  _
                    ByVal lclcolor As String,  _
                    ByVal lslcolor As String,  _
                    ByVal machinenum As String,  _
                    ByVal numberofparameters As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(3)
            If (PartName Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(PartName,String)
            End If
            If (Organisation Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(AddressLine3,String)
            End If
            If (operatorname Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(operatorname,String)
            End If
            If (NumberOfResults.HasValue = true) Then
                command.Parameters(6).Value = CType(NumberOfResults.Value,Short)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ParameterName1 Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(ParameterName1,String)
            End If
            If (USL1.HasValue = true) Then
                command.Parameters(8).Value = CType(USL1.Value,Decimal)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UCL1.HasValue = true) Then
                command.Parameters(9).Value = CType(UCL1.Value,Decimal)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (NOM1.HasValue = true) Then
                command.Parameters(10).Value = CType(NOM1.Value,Decimal)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LCL1.HasValue = true) Then
                command.Parameters(11).Value = CType(LCL1.Value,Decimal)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (LSL1.HasValue = true) Then
                command.Parameters(12).Value = CType(LSL1.Value,Decimal)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SampleSize1.HasValue = true) Then
                command.Parameters(13).Value = CType(SampleSize1.Value,Short)
            Else
                command.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency1.HasValue = true) Then
                command.Parameters(14).Value = CType(SampleFrequency1.Value,Short)
            Else
                command.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups1.HasValue = true) Then
                command.Parameters(15).Value = CType(NumberofSubGroups1.Value,Short)
            Else
                command.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ParameterName2 Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(ParameterName2,String)
            End If
            If (USL2.HasValue = true) Then
                command.Parameters(17).Value = CType(USL2.Value,Decimal)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UCL2.HasValue = true) Then
                command.Parameters(18).Value = CType(UCL2.Value,Decimal)
            Else
                command.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (NOM2.HasValue = true) Then
                command.Parameters(19).Value = CType(NOM2.Value,Decimal)
            Else
                command.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (LCL2.HasValue = true) Then
                command.Parameters(20).Value = CType(LCL2.Value,Decimal)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (LSL2.HasValue = true) Then
                command.Parameters(21).Value = CType(LSL2.Value,Decimal)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (SampleSize2.HasValue = true) Then
                command.Parameters(22).Value = CType(SampleSize2.Value,Short)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency2.HasValue = true) Then
                command.Parameters(23).Value = CType(SampleFrequency2.Value,Short)
            Else
                command.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups2.HasValue = true) Then
                command.Parameters(24).Value = CType(NumberofSubGroups2.Value,Short)
            Else
                command.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (ParameterName3 Is Nothing) Then
                command.Parameters(25).Value = Global.System.DBNull.Value
            Else
                command.Parameters(25).Value = CType(ParameterName3,String)
            End If
            If (USL3.HasValue = true) Then
                command.Parameters(26).Value = CType(USL3.Value,Decimal)
            Else
                command.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (UCL3.HasValue = true) Then
                command.Parameters(27).Value = CType(UCL3.Value,Decimal)
            Else
                command.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (NOM3.HasValue = true) Then
                command.Parameters(28).Value = CType(NOM3.Value,Decimal)
            Else
                command.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (LCL3.HasValue = true) Then
                command.Parameters(29).Value = CType(LCL3.Value,Decimal)
            Else
                command.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (LSL3.HasValue = true) Then
                command.Parameters(30).Value = CType(LSL3.Value,Decimal)
            Else
                command.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (SampleSize3.HasValue = true) Then
                command.Parameters(31).Value = CType(SampleSize3.Value,Short)
            Else
                command.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency3.HasValue = true) Then
                command.Parameters(32).Value = CType(SampleFrequency3.Value,Short)
            Else
                command.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups3.HasValue = true) Then
                command.Parameters(33).Value = CType(NumberofSubGroups3.Value,Short)
            Else
                command.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ParameterName4 Is Nothing) Then
                command.Parameters(34).Value = Global.System.DBNull.Value
            Else
                command.Parameters(34).Value = CType(ParameterName4,String)
            End If
            If (USL4.HasValue = true) Then
                command.Parameters(35).Value = CType(USL4.Value,Decimal)
            Else
                command.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (UCL4.HasValue = true) Then
                command.Parameters(36).Value = CType(UCL4.Value,Decimal)
            Else
                command.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (NOM4.HasValue = true) Then
                command.Parameters(37).Value = CType(NOM4.Value,Decimal)
            Else
                command.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (LCL4.HasValue = true) Then
                command.Parameters(38).Value = CType(LCL4.Value,Decimal)
            Else
                command.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (LSL4.HasValue = true) Then
                command.Parameters(39).Value = CType(LSL4.Value,Decimal)
            Else
                command.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (SampleSize4.HasValue = true) Then
                command.Parameters(40).Value = CType(SampleSize4.Value,Short)
            Else
                command.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency4.HasValue = true) Then
                command.Parameters(41).Value = CType(SampleFrequency4.Value,Short)
            Else
                command.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups4.HasValue = true) Then
                command.Parameters(42).Value = CType(NumberofSubGroups4.Value,Short)
            Else
                command.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (ParameterName5 Is Nothing) Then
                command.Parameters(43).Value = Global.System.DBNull.Value
            Else
                command.Parameters(43).Value = CType(ParameterName5,String)
            End If
            If (USL5.HasValue = true) Then
                command.Parameters(44).Value = CType(USL5.Value,Decimal)
            Else
                command.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (UCL5.HasValue = true) Then
                command.Parameters(45).Value = CType(UCL5.Value,Decimal)
            Else
                command.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (NOM5.HasValue = true) Then
                command.Parameters(46).Value = CType(NOM5.Value,Decimal)
            Else
                command.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (LCL5.HasValue = true) Then
                command.Parameters(47).Value = CType(LCL5.Value,Decimal)
            Else
                command.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (LSL5.HasValue = true) Then
                command.Parameters(48).Value = CType(LSL5.Value,Decimal)
            Else
                command.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (SampleSize5.HasValue = true) Then
                command.Parameters(49).Value = CType(SampleSize5.Value,Short)
            Else
                command.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency5.HasValue = true) Then
                command.Parameters(50).Value = CType(SampleFrequency5.Value,Short)
            Else
                command.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups5.HasValue = true) Then
                command.Parameters(51).Value = CType(NumberofSubGroups5.Value,Short)
            Else
                command.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (ParameterName6 Is Nothing) Then
                command.Parameters(52).Value = Global.System.DBNull.Value
            Else
                command.Parameters(52).Value = CType(ParameterName6,String)
            End If
            If (USL6.HasValue = true) Then
                command.Parameters(53).Value = CType(USL6.Value,Decimal)
            Else
                command.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (UCL6.HasValue = true) Then
                command.Parameters(54).Value = CType(UCL6.Value,Decimal)
            Else
                command.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (NOM6.HasValue = true) Then
                command.Parameters(55).Value = CType(NOM6.Value,Decimal)
            Else
                command.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LCL6.HasValue = true) Then
                command.Parameters(56).Value = CType(LCL6.Value,Decimal)
            Else
                command.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (LSL6.HasValue = true) Then
                command.Parameters(57).Value = CType(LSL6.Value,Decimal)
            Else
                command.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (SampleSize6.HasValue = true) Then
                command.Parameters(58).Value = CType(SampleSize6.Value,Short)
            Else
                command.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency6.HasValue = true) Then
                command.Parameters(59).Value = CType(SampleFrequency6.Value,Short)
            Else
                command.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups6.HasValue = true) Then
                command.Parameters(60).Value = CType(NumberofSubGroups6.Value,Short)
            Else
                command.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (ParameterName7 Is Nothing) Then
                command.Parameters(61).Value = Global.System.DBNull.Value
            Else
                command.Parameters(61).Value = CType(ParameterName7,String)
            End If
            If (USL7.HasValue = true) Then
                command.Parameters(62).Value = CType(USL7.Value,Decimal)
            Else
                command.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (UCL7.HasValue = true) Then
                command.Parameters(63).Value = CType(UCL7.Value,Decimal)
            Else
                command.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (NOM7.HasValue = true) Then
                command.Parameters(64).Value = CType(NOM7.Value,Decimal)
            Else
                command.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (LCL7.HasValue = true) Then
                command.Parameters(65).Value = CType(LCL7.Value,Decimal)
            Else
                command.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (LSL7.HasValue = true) Then
                command.Parameters(66).Value = CType(LSL7.Value,Decimal)
            Else
                command.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (SampleSize7.HasValue = true) Then
                command.Parameters(67).Value = CType(SampleSize7.Value,Short)
            Else
                command.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency7.HasValue = true) Then
                command.Parameters(68).Value = CType(SampleFrequency7.Value,Short)
            Else
                command.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups7.HasValue = true) Then
                command.Parameters(69).Value = CType(NumberofSubGroups7.Value,Short)
            Else
                command.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (ParameterName8 Is Nothing) Then
                command.Parameters(70).Value = Global.System.DBNull.Value
            Else
                command.Parameters(70).Value = CType(ParameterName8,String)
            End If
            If (USL8.HasValue = true) Then
                command.Parameters(71).Value = CType(USL8.Value,Decimal)
            Else
                command.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (UCL8.HasValue = true) Then
                command.Parameters(72).Value = CType(UCL8.Value,Decimal)
            Else
                command.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (NOM8.HasValue = true) Then
                command.Parameters(73).Value = CType(NOM8.Value,Decimal)
            Else
                command.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (LCL8.HasValue = true) Then
                command.Parameters(74).Value = CType(LCL8.Value,Decimal)
            Else
                command.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (LSL8.HasValue = true) Then
                command.Parameters(75).Value = CType(LSL8.Value,Decimal)
            Else
                command.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (SampleSize8.HasValue = true) Then
                command.Parameters(76).Value = CType(SampleSize8.Value,Short)
            Else
                command.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency8.HasValue = true) Then
                command.Parameters(77).Value = CType(SampleFrequency8.Value,Short)
            Else
                command.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups8.HasValue = true) Then
                command.Parameters(78).Value = CType(NumberofSubGroups8.Value,Short)
            Else
                command.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                command.Parameters(79).Value = Global.System.DBNull.Value
            Else
                command.Parameters(79).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                command.Parameters(80).Value = Global.System.DBNull.Value
            Else
                command.Parameters(80).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                command.Parameters(81).Value = Global.System.DBNull.Value
            Else
                command.Parameters(81).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                command.Parameters(82).Value = Global.System.DBNull.Value
            Else
                command.Parameters(82).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                command.Parameters(83).Value = Global.System.DBNull.Value
            Else
                command.Parameters(83).Value = CType(lslcolor,String)
            End If
            If (machinenum Is Nothing) Then
                command.Parameters(84).Value = Global.System.DBNull.Value
            Else
                command.Parameters(84).Value = CType(machinenum,String)
            End If
            If (numberofparameters.HasValue = true) Then
                command.Parameters(85).Value = CType(numberofparameters.Value,Integer)
            Else
                command.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerTriColorColumnTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomerTriColorColumn"
            tableMapping.ColumnMappings.Add("customerId", "customerId")
            tableMapping.ColumnMappings.Add("Organisation", "Organisation")
            tableMapping.ColumnMappings.Add("AddressLine1", "AddressLine1")
            tableMapping.ColumnMappings.Add("AddressLine2", "AddressLine2")
            tableMapping.ColumnMappings.Add("AddressLine3", "AddressLine3")
            tableMapping.ColumnMappings.Add("ContactPerson", "ContactPerson")
            tableMapping.ColumnMappings.Add("ParameterName", "ParameterName")
            tableMapping.ColumnMappings.Add("USL", "USL")
            tableMapping.ColumnMappings.Add("UCL", "UCL")
            tableMapping.ColumnMappings.Add("NOM", "NOM")
            tableMapping.ColumnMappings.Add("LCL", "LCL")
            tableMapping.ColumnMappings.Add("LSL", "LSL")
            tableMapping.ColumnMappings.Add("SampleSize", "SampleSize")
            tableMapping.ColumnMappings.Add("SampleFrequency", "SampleFrequency")
            tableMapping.ColumnMappings.Add("NumberofSubGroups", "NumberofSubGroups")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `CustomerTriColorColumn` WHERE ((`customerId` = ?) AND ((? = 1 AND `O"& _ 
                "rganisation` IS NULL) OR (`Organisation` = ?)) AND ((? = 1 AND `AddressLine1` IS"& _ 
                " NULL) OR (`AddressLine1` = ?)) AND ((? = 1 AND `AddressLine2` IS NULL) OR (`Add"& _ 
                "ressLine2` = ?)) AND ((? = 1 AND `AddressLine3` IS NULL) OR (`AddressLine3` = ?)"& _ 
                ") AND ((? = 1 AND `ContactPerson` IS NULL) OR (`ContactPerson` = ?)) AND ((? = 1"& _ 
                " AND `ParameterName` IS NULL) OR (`ParameterName` = ?)) AND ((? = 1 AND `USL` IS"& _ 
                " NULL) OR (`USL` = ?)) AND ((? = 1 AND `UCL` IS NULL) OR (`UCL` = ?)) AND ((? = "& _ 
                "1 AND `NOM` IS NULL) OR (`NOM` = ?)) AND ((? = 1 AND `LCL` IS NULL) OR (`LCL` = "& _ 
                "?)) AND ((? = 1 AND `LSL` IS NULL) OR (`LSL` = ?)) AND ((? = 1 AND `SampleSize` "& _ 
                "IS NULL) OR (`SampleSize` = ?)) AND ((? = 1 AND `SampleFrequency` IS NULL) OR (`"& _ 
                "SampleFrequency` = ?)) AND ((? = 1 AND `NumberofSubGroups` IS NULL) OR (`Numbero"& _ 
                "fSubGroups` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_customerId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customerId", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Organisation", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactPerson", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactPerson", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `CustomerTriColorColumn` (`customerId`, `Organisation`, `AddressLine1"& _ 
                "`, `AddressLine2`, `AddressLine3`, `ContactPerson`, `ParameterName`, `USL`, `UCL"& _ 
                "`, `NOM`, `LCL`, `LSL`, `SampleSize`, `SampleFrequency`, `NumberofSubGroups`) VA"& _ 
                "LUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("customerId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customerId", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactPerson", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `CustomerTriColorColumn` SET `customerId` = ?, `Organisation` = ?, `Addres"& _ 
                "sLine1` = ?, `AddressLine2` = ?, `AddressLine3` = ?, `ContactPerson` = ?, `Param"& _ 
                "eterName` = ?, `USL` = ?, `UCL` = ?, `NOM` = ?, `LCL` = ?, `LSL` = ?, `SampleSiz"& _ 
                "e` = ?, `SampleFrequency` = ?, `NumberofSubGroups` = ? WHERE ((`customerId` = ?)"& _ 
                " AND ((? = 1 AND `Organisation` IS NULL) OR (`Organisation` = ?)) AND ((? = 1 AN"& _ 
                "D `AddressLine1` IS NULL) OR (`AddressLine1` = ?)) AND ((? = 1 AND `AddressLine2"& _ 
                "` IS NULL) OR (`AddressLine2` = ?)) AND ((? = 1 AND `AddressLine3` IS NULL) OR ("& _ 
                "`AddressLine3` = ?)) AND ((? = 1 AND `ContactPerson` IS NULL) OR (`ContactPerson"& _ 
                "` = ?)) AND ((? = 1 AND `ParameterName` IS NULL) OR (`ParameterName` = ?)) AND ("& _ 
                "(? = 1 AND `USL` IS NULL) OR (`USL` = ?)) AND ((? = 1 AND `UCL` IS NULL) OR (`UC"& _ 
                "L` = ?)) AND ((? = 1 AND `NOM` IS NULL) OR (`NOM` = ?)) AND ((? = 1 AND `LCL` IS"& _ 
                " NULL) OR (`LCL` = ?)) AND ((? = 1 AND `LSL` IS NULL) OR (`LSL` = ?)) AND ((? = "& _ 
                "1 AND `SampleSize` IS NULL) OR (`SampleSize` = ?)) AND ((? = 1 AND `SampleFreque"& _ 
                "ncy` IS NULL) OR (`SampleFrequency` = ?)) AND ((? = 1 AND `NumberofSubGroups` IS"& _ 
                " NULL) OR (`NumberofSubGroups` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("customerId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customerId", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ContactPerson", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ParameterName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("UCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NOM", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LSL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleSize", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SampleFrequency", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("NumberofSubGroups", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_customerId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customerId", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_Organisation", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_Organisation", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Organisation", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_AddressLine3", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_AddressLine3", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "AddressLine3", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ContactPerson", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ContactPerson", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ContactPerson", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ParameterName", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ParameterName", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ParameterName", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_USL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_UCL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_UCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "UCL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NOM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NOM", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NOM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LCL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LCL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LSL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LSL", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LSL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleSize", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleSize", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleSize", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SampleFrequency", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SampleFrequency", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SampleFrequency", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_NumberofSubGroups", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_NumberofSubGroups", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NumberofSubGroups", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT customerId, Organisation, AddressLine1, AddressLine2, AddressLine3, Contac"& _ 
                "tPerson, ParameterName, USL, UCL, NOM, LCL, LSL, SampleSize, SampleFrequency, Nu"& _ 
                "mberofSubGroups FROM CustomerTriColorColumn"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.CustomerTriColorColumnDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.CustomerTriColorColumnDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.CustomerTriColorColumnDataTable = New VersaGageMonitorDataSet.CustomerTriColorColumnDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.CustomerTriColorColumnDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomerTriColorColumn")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_customerId As Global.System.Nullable(Of Integer), ByVal Original_Organisation As String, ByVal Original_AddressLine1 As String, ByVal Original_AddressLine2 As String, ByVal Original_AddressLine3 As String, ByVal Original_ContactPerson As String, ByVal Original_ParameterName As String, ByVal Original_USL As Global.System.Nullable(Of Single), ByVal Original_UCL As Global.System.Nullable(Of Single), ByVal Original_NOM As Global.System.Nullable(Of Single), ByVal Original_LCL As Global.System.Nullable(Of Single), ByVal Original_LSL As Global.System.Nullable(Of Single), ByVal Original_SampleSize As Global.System.Nullable(Of Short), ByVal Original_SampleFrequency As Global.System.Nullable(Of Short), ByVal Original_NumberofSubGroups As Global.System.Nullable(Of Short)) As Integer
            If (Original_customerId.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_customerId.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_Organisation Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Organisation,String)
            End If
            If (Original_AddressLine1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AddressLine1")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_AddressLine1,String)
            End If
            If (Original_AddressLine2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_AddressLine2,String)
            End If
            If (Original_AddressLine3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_AddressLine3,String)
            End If
            If (Original_ContactPerson Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ContactPerson,String)
            End If
            If (Original_ParameterName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ParameterName,String)
            End If
            If (Original_USL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_USL.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_UCL.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_NOM.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_LCL.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_LSL.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_SampleSize.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_SampleFrequency.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_NumberofSubGroups.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal customerId As Global.System.Nullable(Of Integer), ByVal Organisation As String, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal ContactPerson As String, ByVal ParameterName As String, ByVal USL As Global.System.Nullable(Of Single), ByVal UCL As Global.System.Nullable(Of Single), ByVal NOM As Global.System.Nullable(Of Single), ByVal LCL As Global.System.Nullable(Of Single), ByVal LSL As Global.System.Nullable(Of Single), ByVal SampleSize As Global.System.Nullable(Of Short), ByVal SampleFrequency As Global.System.Nullable(Of Short), ByVal NumberofSubGroups As Global.System.Nullable(Of Short)) As Integer
            If (customerId.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(customerId.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Organisation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AddressLine1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(AddressLine3,String)
            End If
            If (ContactPerson Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ContactPerson,String)
            End If
            If (ParameterName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ParameterName,String)
            End If
            If (USL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(USL.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (UCL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(UCL.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NOM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NOM.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LCL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(LCL.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LSL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(LSL.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SampleSize.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SampleSize.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SampleFrequency.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NumberofSubGroups.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal customerId As Global.System.Nullable(Of Integer),  _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal ContactPerson As String,  _
                    ByVal ParameterName As String,  _
                    ByVal USL As Global.System.Nullable(Of Single),  _
                    ByVal UCL As Global.System.Nullable(Of Single),  _
                    ByVal NOM As Global.System.Nullable(Of Single),  _
                    ByVal LCL As Global.System.Nullable(Of Single),  _
                    ByVal LSL As Global.System.Nullable(Of Single),  _
                    ByVal SampleSize As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups As Global.System.Nullable(Of Short),  _
                    ByVal Original_customerId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Organisation As String,  _
                    ByVal Original_AddressLine1 As String,  _
                    ByVal Original_AddressLine2 As String,  _
                    ByVal Original_AddressLine3 As String,  _
                    ByVal Original_ContactPerson As String,  _
                    ByVal Original_ParameterName As String,  _
                    ByVal Original_USL As Global.System.Nullable(Of Single),  _
                    ByVal Original_UCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_NOM As Global.System.Nullable(Of Single),  _
                    ByVal Original_LCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_LSL As Global.System.Nullable(Of Single),  _
                    ByVal Original_SampleSize As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups As Global.System.Nullable(Of Short)) As Integer
            If (customerId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(customerId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Organisation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Organisation,String)
            End If
            If (AddressLine1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AddressLine1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AddressLine1,String)
            End If
            If (AddressLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AddressLine2,String)
            End If
            If (AddressLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AddressLine3,String)
            End If
            If (ContactPerson Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ContactPerson,String)
            End If
            If (ParameterName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ParameterName,String)
            End If
            If (USL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(USL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (UCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NOM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NOM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (LCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(LCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (LSL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(LSL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SampleSize.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SampleSize.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SampleFrequency.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SampleFrequency.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NumberofSubGroups.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NumberofSubGroups.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_customerId.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_customerId.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_Organisation Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Organisation,String)
            End If
            If (Original_AddressLine1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AddressLine1")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_AddressLine1,String)
            End If
            If (Original_AddressLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_AddressLine2,String)
            End If
            If (Original_AddressLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_AddressLine3,String)
            End If
            If (Original_ContactPerson Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ContactPerson,String)
            End If
            If (Original_ParameterName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ParameterName,String)
            End If
            If (Original_USL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_USL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_UCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_UCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_NOM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_NOM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_LCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_LSL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LSL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleSize.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_SampleSize.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_SampleFrequency.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SampleFrequency.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_NumberofSubGroups.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_NumberofSubGroups.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Organisation As String,  _
                    ByVal AddressLine1 As String,  _
                    ByVal AddressLine2 As String,  _
                    ByVal AddressLine3 As String,  _
                    ByVal ContactPerson As String,  _
                    ByVal ParameterName As String,  _
                    ByVal USL As Global.System.Nullable(Of Single),  _
                    ByVal UCL As Global.System.Nullable(Of Single),  _
                    ByVal NOM As Global.System.Nullable(Of Single),  _
                    ByVal LCL As Global.System.Nullable(Of Single),  _
                    ByVal LSL As Global.System.Nullable(Of Single),  _
                    ByVal SampleSize As Global.System.Nullable(Of Short),  _
                    ByVal SampleFrequency As Global.System.Nullable(Of Short),  _
                    ByVal NumberofSubGroups As Global.System.Nullable(Of Short),  _
                    ByVal Original_customerId As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Organisation As String,  _
                    ByVal Original_AddressLine1 As String,  _
                    ByVal Original_AddressLine2 As String,  _
                    ByVal Original_AddressLine3 As String,  _
                    ByVal Original_ContactPerson As String,  _
                    ByVal Original_ParameterName As String,  _
                    ByVal Original_USL As Global.System.Nullable(Of Single),  _
                    ByVal Original_UCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_NOM As Global.System.Nullable(Of Single),  _
                    ByVal Original_LCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_LSL As Global.System.Nullable(Of Single),  _
                    ByVal Original_SampleSize As Global.System.Nullable(Of Short),  _
                    ByVal Original_SampleFrequency As Global.System.Nullable(Of Short),  _
                    ByVal Original_NumberofSubGroups As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_customerId, Organisation, AddressLine1, AddressLine2, AddressLine3, ContactPerson, ParameterName, USL, UCL, NOM, LCL, LSL, SampleSize, SampleFrequency, NumberofSubGroups, Original_customerId, Original_Organisation, Original_AddressLine1, Original_AddressLine2, Original_AddressLine3, Original_ContactPerson, Original_ParameterName, Original_USL, Original_UCL, Original_NOM, Original_LCL, Original_LSL, Original_SampleSize, Original_SampleFrequency, Original_NumberofSubGroups)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LoginTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Login"
            tableMapping.ColumnMappings.Add("user_name", "user_name")
            tableMapping.ColumnMappings.Add("pass", "pass")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Login` (`user_name`, `pass`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("user_name", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "user_name", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("pass", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "pass", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT user_name, pass FROM Login"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.LoginDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.LoginDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.LoginDataTable = New VersaGageMonitorDataSet.LoginDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.LoginDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Login")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal user_name As String, ByVal pass As String) As Integer
            If (user_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(user_name,String)
            End If
            If (pass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(pass,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class partdetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "partdetails"
            tableMapping.ColumnMappings.Add("partId", "partId")
            tableMapping.ColumnMappings.Add("partname", "partname")
            tableMapping.ColumnMappings.Add("customername", "customername")
            tableMapping.ColumnMappings.Add("usl", "usl")
            tableMapping.ColumnMappings.Add("ucl", "ucl")
            tableMapping.ColumnMappings.Add("nv", "nv")
            tableMapping.ColumnMappings.Add("lcl", "lcl")
            tableMapping.ColumnMappings.Add("lsl", "lsl")
            tableMapping.ColumnMappings.Add("uslcolor", "uslcolor")
            tableMapping.ColumnMappings.Add("uclcolor", "uclcolor")
            tableMapping.ColumnMappings.Add("nvcolor", "nvcolor")
            tableMapping.ColumnMappings.Add("lclcolor", "lclcolor")
            tableMapping.ColumnMappings.Add("lslcolor", "lslcolor")
            tableMapping.ColumnMappings.Add("paramname", "paramname")
            tableMapping.ColumnMappings.Add("operatorname", "operatorname")
            tableMapping.ColumnMappings.Add("machinenum", "machinenum")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `partdetails` WHERE ((`partId` = ?) AND ((? = 1 AND `partname` IS NUL"& _ 
                "L) OR (`partname` = ?)) AND ((? = 1 AND `customername` IS NULL) OR (`customernam"& _ 
                "e` = ?)) AND ((? = 1 AND `usl` IS NULL) OR (`usl` = ?)) AND ((? = 1 AND `ucl` IS"& _ 
                " NULL) OR (`ucl` = ?)) AND ((? = 1 AND `nv` IS NULL) OR (`nv` = ?)) AND ((? = 1 "& _ 
                "AND `lcl` IS NULL) OR (`lcl` = ?)) AND ((? = 1 AND `lsl` IS NULL) OR (`lsl` = ?)"& _ 
                ") AND ((? = 1 AND `uslcolor` IS NULL) OR (`uslcolor` = ?)) AND ((? = 1 AND `uclc"& _ 
                "olor` IS NULL) OR (`uclcolor` = ?)) AND ((? = 1 AND `nvcolor` IS NULL) OR (`nvco"& _ 
                "lor` = ?)) AND ((? = 1 AND `lclcolor` IS NULL) OR (`lclcolor` = ?)) AND ((? = 1 "& _ 
                "AND `lslcolor` IS NULL) OR (`lslcolor` = ?)) AND ((? = 1 AND `paramname` IS NULL"& _ 
                ") OR (`paramname` = ?)) AND ((? = 1 AND `operatorname` IS NULL) OR (`operatornam"& _ 
                "e` = ?)) AND ((? = 1 AND `machinenum` IS NULL) OR (`machinenum` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_partId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partId", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_partname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_partname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_customername", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_customername", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_usl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_usl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ucl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ucl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nv", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nv", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lcl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lcl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lsl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lsl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nvcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_paramname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_paramname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_operatorname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_machinenum", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `partdetails` (`partname`, `customername`, `usl`, `ucl`, `nv`, `lcl`,"& _ 
                " `lsl`, `uslcolor`, `uclcolor`, `nvcolor`, `lclcolor`, `lslcolor`, `paramname`, "& _ 
                "`operatorname`, `machinenum`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("partname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("customername", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("usl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ucl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nv", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lcl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lsl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("paramname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `partdetails` SET `partname` = ?, `customername` = ?, `usl` = ?, `ucl` = ?"& _ 
                ", `nv` = ?, `lcl` = ?, `lsl` = ?, `uslcolor` = ?, `uclcolor` = ?, `nvcolor` = ?,"& _ 
                " `lclcolor` = ?, `lslcolor` = ?, `paramname` = ?, `operatorname` = ?, `machinenu"& _ 
                "m` = ? WHERE ((`partId` = ?) AND ((? = 1 AND `partname` IS NULL) OR (`partname` "& _ 
                "= ?)) AND ((? = 1 AND `customername` IS NULL) OR (`customername` = ?)) AND ((? ="& _ 
                " 1 AND `usl` IS NULL) OR (`usl` = ?)) AND ((? = 1 AND `ucl` IS NULL) OR (`ucl` ="& _ 
                " ?)) AND ((? = 1 AND `nv` IS NULL) OR (`nv` = ?)) AND ((? = 1 AND `lcl` IS NULL)"& _ 
                " OR (`lcl` = ?)) AND ((? = 1 AND `lsl` IS NULL) OR (`lsl` = ?)) AND ((? = 1 AND "& _ 
                "`uslcolor` IS NULL) OR (`uslcolor` = ?)) AND ((? = 1 AND `uclcolor` IS NULL) OR "& _ 
                "(`uclcolor` = ?)) AND ((? = 1 AND `nvcolor` IS NULL) OR (`nvcolor` = ?)) AND ((?"& _ 
                " = 1 AND `lclcolor` IS NULL) OR (`lclcolor` = ?)) AND ((? = 1 AND `lslcolor` IS "& _ 
                "NULL) OR (`lslcolor` = ?)) AND ((? = 1 AND `paramname` IS NULL) OR (`paramname` "& _ 
                "= ?)) AND ((? = 1 AND `operatorname` IS NULL) OR (`operatorname` = ?)) AND ((? ="& _ 
                " 1 AND `machinenum` IS NULL) OR (`machinenum` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("partname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("customername", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("usl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ucl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nv", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lcl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lsl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("paramname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_partId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partId", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_partname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_partname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_customername", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_customername", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_usl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_usl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ucl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ucl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nv", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nv", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lcl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lcl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lsl", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lsl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_uclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_uclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_nvcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_nvcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lclcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lclcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_lslcolor", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_lslcolor", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_paramname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_paramname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_operatorname", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_operatorname", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_machinenum", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_machinenum", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.VersaGageMonitor.My.MySettings.Default.VersaGageMonitorConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     partId, partname, customername, usl, ucl, nv, lcl, lsl, uslcolor, uclc"& _ 
                "olor, nvcolor, lclcolor, lslcolor, paramname, operatorname, machinenum"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "     partdetails"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM partdetails"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (partId = ?)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("partId", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partId", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._commandCollection(2) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO partdetails"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (partname, customername, usl, ucl,"& _ 
                " nv, lcl, lsl, uslcolor, uclcolor, nvcolor, lclcolor, lslcolor, paramname, opera"& _ 
                "torname, machinenum)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES     (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param2", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param3", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param4", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param5", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param6", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param7", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param8", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param9", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param10", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param11", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param12", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param13", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param14", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Param15", Global.System.Data.OleDb.OleDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3) = New Global.System.Data.OleDb.OleDbCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE    partdetails"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              partname = ?, customername = ?, usl = ?, "& _ 
                "ucl = ?, nv = ?, lcl = ?, lsl = ?, uslcolor = ?, uclcolor = ?, nvcolor = ?, lclc"& _ 
                "olor = ?, lslcolor = ?, paramname = ?, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      operatorname = ?,"& _ 
                " machinenum = ?"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("partname", Global.System.Data.OleDb.OleDbType.WChar, 50, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "partname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("customername", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "customername", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("usl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "usl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ucl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "ucl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nv", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "nv", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lcl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "lcl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lsl", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(15,Byte), CType(0,Byte), "lsl", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uslcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("uclcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "uclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("nvcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "nvcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lclcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lclcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("lslcolor", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "lslcolor", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("paramname", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "paramname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("operatorname", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "operatorname", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("machinenum", Global.System.Data.OleDb.OleDbType.WChar, 255, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "machinenum", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VersaGageMonitorDataSet.partdetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VersaGageMonitorDataSet.partdetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VersaGageMonitorDataSet.partdetailsDataTable = New VersaGageMonitorDataSet.partdetailsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VersaGageMonitorDataSet.partdetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "partdetails")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_partId As Integer,  _
                    ByVal Original_partname As String,  _
                    ByVal Original_customername As String,  _
                    ByVal Original_usl As Global.System.Nullable(Of Double),  _
                    ByVal Original_ucl As Global.System.Nullable(Of Double),  _
                    ByVal Original_nv As Global.System.Nullable(Of Double),  _
                    ByVal Original_lcl As Global.System.Nullable(Of Double),  _
                    ByVal Original_lsl As Global.System.Nullable(Of Double),  _
                    ByVal Original_uslcolor As String,  _
                    ByVal Original_uclcolor As String,  _
                    ByVal Original_nvcolor As String,  _
                    ByVal Original_lclcolor As String,  _
                    ByVal Original_lslcolor As String,  _
                    ByVal Original_paramname As String,  _
                    ByVal Original_operatorname As String,  _
                    ByVal Original_machinenum As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_partId,Integer)
            If (Original_partname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_partname,String)
            End If
            If (Original_customername Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_customername,String)
            End If
            If (Original_usl.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_usl.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ucl.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ucl.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_nv.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_nv.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_lcl.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_lcl.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_lsl.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_lsl.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_uslcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_uslcolor,String)
            End If
            If (Original_uclcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_uclcolor,String)
            End If
            If (Original_nvcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_nvcolor,String)
            End If
            If (Original_lclcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_lclcolor,String)
            End If
            If (Original_lslcolor Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_lslcolor,String)
            End If
            If (Original_paramname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_paramname,String)
            End If
            If (Original_operatorname Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_operatorname,String)
            End If
            If (Original_machinenum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_machinenum,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal partname As String, ByVal customername As String, ByVal usl As Global.System.Nullable(Of Double), ByVal ucl As Global.System.Nullable(Of Double), ByVal nv As Global.System.Nullable(Of Double), ByVal lcl As Global.System.Nullable(Of Double), ByVal lsl As Global.System.Nullable(Of Double), ByVal uslcolor As String, ByVal uclcolor As String, ByVal nvcolor As String, ByVal lclcolor As String, ByVal lslcolor As String, ByVal paramname As String, ByVal operatorname As String, ByVal machinenum As String) As Integer
            If (partname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(partname,String)
            End If
            If (customername Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(customername,String)
            End If
            If (usl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(usl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ucl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ucl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (nv.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(nv.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lcl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(lcl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (lsl.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(lsl.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(lslcolor,String)
            End If
            If (paramname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(paramname,String)
            End If
            If (operatorname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(operatorname,String)
            End If
            If (machinenum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(machinenum,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal partname As String,  _
                    ByVal customername As String,  _
                    ByVal usl As Global.System.Nullable(Of Double),  _
                    ByVal ucl As Global.System.Nullable(Of Double),  _
                    ByVal nv As Global.System.Nullable(Of Double),  _
                    ByVal lcl As Global.System.Nullable(Of Double),  _
                    ByVal lsl As Global.System.Nullable(Of Double),  _
                    ByVal uslcolor As String,  _
                    ByVal uclcolor As String,  _
                    ByVal nvcolor As String,  _
                    ByVal lclcolor As String,  _
                    ByVal lslcolor As String,  _
                    ByVal paramname As String,  _
                    ByVal operatorname As String,  _
                    ByVal machinenum As String,  _
                    ByVal Original_partId As Integer,  _
                    ByVal Original_partname As String,  _
                    ByVal Original_customername As String,  _
                    ByVal Original_usl As Global.System.Nullable(Of Double),  _
                    ByVal Original_ucl As Global.System.Nullable(Of Double),  _
                    ByVal Original_nv As Global.System.Nullable(Of Double),  _
                    ByVal Original_lcl As Global.System.Nullable(Of Double),  _
                    ByVal Original_lsl As Global.System.Nullable(Of Double),  _
                    ByVal Original_uslcolor As String,  _
                    ByVal Original_uclcolor As String,  _
                    ByVal Original_nvcolor As String,  _
                    ByVal Original_lclcolor As String,  _
                    ByVal Original_lslcolor As String,  _
                    ByVal Original_paramname As String,  _
                    ByVal Original_operatorname As String,  _
                    ByVal Original_machinenum As String) As Integer
            If (partname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(partname,String)
            End If
            If (customername Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(customername,String)
            End If
            If (usl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(usl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ucl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ucl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (nv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(nv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lcl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lcl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (lsl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lsl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(lslcolor,String)
            End If
            If (paramname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(paramname,String)
            End If
            If (operatorname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(operatorname,String)
            End If
            If (machinenum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(machinenum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_partId,Integer)
            If (Original_partname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_partname,String)
            End If
            If (Original_customername Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_customername,String)
            End If
            If (Original_usl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_usl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ucl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ucl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_nv.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_nv.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_lcl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_lcl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_lsl.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_lsl.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_uslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_uslcolor,String)
            End If
            If (Original_uclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_uclcolor,String)
            End If
            If (Original_nvcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_nvcolor,String)
            End If
            If (Original_lclcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_lclcolor,String)
            End If
            If (Original_lslcolor Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_lslcolor,String)
            End If
            If (Original_paramname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_paramname,String)
            End If
            If (Original_operatorname Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_operatorname,String)
            End If
            If (Original_machinenum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_machinenum,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteQuery(ByVal partId As Integer) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(partId,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal machinenum As String, ByVal Param2 As String, ByVal Param3 As String, ByVal Param4 As String, ByVal Param5 As String, ByVal Param6 As String, ByVal Param7 As String, ByVal Param8 As String, ByVal Param9 As String, ByVal Param10 As String, ByVal Param11 As String, ByVal Param12 As String, ByVal Param13 As String, ByVal Param14 As String, ByVal Param15 As String) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(2)
            If (machinenum Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(machinenum,String)
            End If
            If (Param2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param2")
            Else
                command.Parameters(1).Value = CType(Param2,String)
            End If
            If (Param3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param3")
            Else
                command.Parameters(2).Value = CType(Param3,String)
            End If
            If (Param4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param4")
            Else
                command.Parameters(3).Value = CType(Param4,String)
            End If
            If (Param5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param5")
            Else
                command.Parameters(4).Value = CType(Param5,String)
            End If
            If (Param6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param6")
            Else
                command.Parameters(5).Value = CType(Param6,String)
            End If
            If (Param7 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param7")
            Else
                command.Parameters(6).Value = CType(Param7,String)
            End If
            If (Param8 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param8")
            Else
                command.Parameters(7).Value = CType(Param8,String)
            End If
            If (Param9 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param9")
            Else
                command.Parameters(8).Value = CType(Param9,String)
            End If
            If (Param10 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param10")
            Else
                command.Parameters(9).Value = CType(Param10,String)
            End If
            If (Param11 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param11")
            Else
                command.Parameters(10).Value = CType(Param11,String)
            End If
            If (Param12 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param12")
            Else
                command.Parameters(11).Value = CType(Param12,String)
            End If
            If (Param13 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param13")
            Else
                command.Parameters(12).Value = CType(Param13,String)
            End If
            If (Param14 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param14")
            Else
                command.Parameters(13).Value = CType(Param14,String)
            End If
            If (Param15 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param15")
            Else
                command.Parameters(14).Value = CType(Param15,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateQuery(ByVal partname As String, ByVal customername As String, ByVal usl As Global.System.Nullable(Of Decimal), ByVal ucl As Global.System.Nullable(Of Decimal), ByVal nv As Global.System.Nullable(Of Decimal), ByVal lcl As Global.System.Nullable(Of Decimal), ByVal lsl As Global.System.Nullable(Of Decimal), ByVal uslcolor As String, ByVal uclcolor As String, ByVal nvcolor As String, ByVal lclcolor As String, ByVal lslcolor As String, ByVal paramname As String, ByVal operatorname As String, ByVal machinenum As String) As Integer
            Dim command As Global.System.Data.OleDb.OleDbCommand = Me.CommandCollection(3)
            If (partname Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(partname,String)
            End If
            If (customername Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(customername,String)
            End If
            If (usl.HasValue = true) Then
                command.Parameters(2).Value = CType(usl.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ucl.HasValue = true) Then
                command.Parameters(3).Value = CType(ucl.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (nv.HasValue = true) Then
                command.Parameters(4).Value = CType(nv.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (lcl.HasValue = true) Then
                command.Parameters(5).Value = CType(lcl.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (lsl.HasValue = true) Then
                command.Parameters(6).Value = CType(lsl.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (uslcolor Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(uslcolor,String)
            End If
            If (uclcolor Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(uclcolor,String)
            End If
            If (nvcolor Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(nvcolor,String)
            End If
            If (lclcolor Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(lclcolor,String)
            End If
            If (lslcolor Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(lslcolor,String)
            End If
            If (paramname Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(paramname,String)
            End If
            If (operatorname Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(operatorname,String)
            End If
            If (machinenum Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(machinenum,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _communicationPortTableAdapter As CommunicationPortTableAdapter
        
        Private _custmerInterfaceBoxTableAdapter As CustmerInterfaceBoxTableAdapter
        
        Private _customerOctaGageTableAdapter As CustomerOctaGageTableAdapter
        
        Private _customerTriColorColumnTableAdapter As CustomerTriColorColumnTableAdapter
        
        Private _loginTableAdapter As LoginTableAdapter
        
        Private _partdetailsTableAdapter As partdetailsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CommunicationPortTableAdapter() As CommunicationPortTableAdapter
            Get
                Return Me._communicationPortTableAdapter
            End Get
            Set
                Me._communicationPortTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustmerInterfaceBoxTableAdapter() As CustmerInterfaceBoxTableAdapter
            Get
                Return Me._custmerInterfaceBoxTableAdapter
            End Get
            Set
                Me._custmerInterfaceBoxTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustomerOctaGageTableAdapter() As CustomerOctaGageTableAdapter
            Get
                Return Me._customerOctaGageTableAdapter
            End Get
            Set
                Me._customerOctaGageTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustomerTriColorColumnTableAdapter() As CustomerTriColorColumnTableAdapter
            Get
                Return Me._customerTriColorColumnTableAdapter
            End Get
            Set
                Me._customerTriColorColumnTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LoginTableAdapter() As LoginTableAdapter
            Get
                Return Me._loginTableAdapter
            End Get
            Set
                Me._loginTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property partdetailsTableAdapter() As partdetailsTableAdapter
            Get
                Return Me._partdetailsTableAdapter
            End Get
            Set
                Me._partdetailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._communicationPortTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._communicationPortTableAdapter.Connection) Is Nothing)) Then
                    Return Me._communicationPortTableAdapter.Connection
                End If
                If ((Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._custmerInterfaceBoxTableAdapter.Connection) Is Nothing)) Then
                    Return Me._custmerInterfaceBoxTableAdapter.Connection
                End If
                If ((Not (Me._customerOctaGageTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customerOctaGageTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customerOctaGageTableAdapter.Connection
                End If
                If ((Not (Me._customerTriColorColumnTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customerTriColorColumnTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customerTriColorColumnTableAdapter.Connection
                End If
                If ((Not (Me._loginTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._loginTableAdapter.Connection) Is Nothing)) Then
                    Return Me._loginTableAdapter.Connection
                End If
                If ((Not (Me._partdetailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._partdetailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._partdetailsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As VersaGageMonitorDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CustomerTriColorColumn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customerTriColorColumnTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.partdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._partdetailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CommunicationPort.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._communicationPortTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CustmerInterfaceBox.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._custmerInterfaceBoxTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CustomerOctaGage.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customerOctaGageTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As VersaGageMonitorDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CustomerTriColorColumn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customerTriColorColumnTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.partdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._partdetailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CommunicationPort.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._communicationPortTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CustmerInterfaceBox.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._custmerInterfaceBoxTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CustomerOctaGage.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customerOctaGageTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As VersaGageMonitorDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CustomerOctaGage.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customerOctaGageTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CustmerInterfaceBox.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._custmerInterfaceBoxTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CommunicationPort.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._communicationPortTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.partdetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._partdetailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CustomerTriColorColumn.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customerTriColorColumnTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As VersaGageMonitorDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._communicationPortTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._communicationPortTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._custmerInterfaceBoxTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._customerOctaGageTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._customerOctaGageTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._customerTriColorColumnTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._customerTriColorColumnTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._loginTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._loginTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._partdetailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._partdetailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._communicationPortTableAdapter, Me._communicationPortTableAdapter.Connection)
                    Me._communicationPortTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._communicationPortTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._communicationPortTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._communicationPortTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._communicationPortTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._custmerInterfaceBoxTableAdapter, Me._custmerInterfaceBoxTableAdapter.Connection)
                    Me._custmerInterfaceBoxTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._custmerInterfaceBoxTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._custmerInterfaceBoxTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._custmerInterfaceBoxTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._custmerInterfaceBoxTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customerOctaGageTableAdapter, Me._customerOctaGageTableAdapter.Connection)
                    Me._customerOctaGageTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._customerOctaGageTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._customerOctaGageTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customerOctaGageTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customerOctaGageTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customerTriColorColumnTableAdapter, Me._customerTriColorColumnTableAdapter.Connection)
                    Me._customerTriColorColumnTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._customerTriColorColumnTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._customerTriColorColumnTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customerTriColorColumnTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customerTriColorColumnTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._loginTableAdapter, Me._loginTableAdapter.Connection)
                    Me._loginTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._loginTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._loginTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._loginTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._loginTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._partdetailsTableAdapter, Me._partdetailsTableAdapter.Connection)
                    Me._partdetailsTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._partdetailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._partdetailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._partdetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._partdetailsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._communicationPortTableAdapter) Is Nothing) Then
                    Me._communicationPortTableAdapter.Connection = CType(revertConnections(Me._communicationPortTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._communicationPortTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._custmerInterfaceBoxTableAdapter) Is Nothing) Then
                    Me._custmerInterfaceBoxTableAdapter.Connection = CType(revertConnections(Me._custmerInterfaceBoxTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._custmerInterfaceBoxTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customerOctaGageTableAdapter) Is Nothing) Then
                    Me._customerOctaGageTableAdapter.Connection = CType(revertConnections(Me._customerOctaGageTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._customerOctaGageTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customerTriColorColumnTableAdapter) Is Nothing) Then
                    Me._customerTriColorColumnTableAdapter.Connection = CType(revertConnections(Me._customerTriColorColumnTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._customerTriColorColumnTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    Me._loginTableAdapter.Connection = CType(revertConnections(Me._loginTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._loginTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._partdetailsTableAdapter) Is Nothing) Then
                    Me._partdetailsTableAdapter.Connection = CType(revertConnections(Me._partdetailsTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._partdetailsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
